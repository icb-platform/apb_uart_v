/* Generated by Yosys 0.9+4081 (git sha1 414154dd, clang 7.0.1-8+deb10u2 -fPIC -Os) */

module apb_uart(CLK, RSTN, PSEL, PENABLE, PWRITE, PADDR, PWDATA, CTSN, DSRN, DCDN, RIN, SIN, PRDATA, PREADY, PSLVERR, INT, OUT1N, OUT2N, RTSN, DTRN, SOUT);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire [1:0] _024_;
  wire [7:0] _025_;
  wire _026_;
  wire [5:0] _027_;
  reg [5:0] _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire [31:0] _051_;
  wire _052_;
  wire _053_;
  wire [31:0] _054_;
  wire [6:0] _055_;
  wire [6:0] _056_;
  wire [6:0] _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire [7:0] _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  wire _172_;
  wire _173_;
  wire _174_;
  wire _175_;
  wire _176_;
  wire _177_;
  wire _178_;
  wire _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire [1:0] _183_;
  wire _184_;
  wire _185_;
  wire [1:0] _186_;
  wire _187_;
  wire _188_;
  wire [7:0] _189_;
  wire _190_;
  wire _191_;
  wire _192_;
  wire _193_;
  wire [1:0] _194_;
  wire _195_;
  wire _196_;
  wire _197_;
  wire [10:0] _198_;
  wire _199_;
  wire _200_;
  wire _201_;
  wire _202_;
  wire _203_;
  wire _204_;
  wire _205_;
  wire _206_;
  wire _207_;
  wire _208_;
  wire [10:0] _209_;
  wire _210_;
  wire _211_;
  wire _212_;
  wire _213_;
  wire _214_;
  wire _215_;
  wire _216_;
  wire _217_;
  wire _218_;
  wire _219_;
  wire _220_;
  wire _221_;
  wire _222_;
  wire _223_;
  wire _224_;
  wire _225_;
  wire _226_;
  wire _227_;
  wire _228_;
  wire _229_;
  wire _230_;
  wire _231_;
  wire _232_;
  wire _233_;
  wire _234_;
  wire _235_;
  wire _236_;
  wire _237_;
  reg _238_;
  reg _239_;
  reg _240_;
  reg _241_;
  reg _242_;
  wire _243_;
  wire _244_;
  wire _245_;
  wire [7:0] _246_;
  wire _247_;
  wire _248_;
  wire [7:0] _249_;
  wire _250_;
  wire _251_;
  wire _252_;
  wire _253_;
  wire _254_;
  wire _255_;
  wire _256_;
  wire [7:0] _257_;
  wire _258_;
  wire _259_;
  wire _260_;
  wire _261_;
  wire _262_;
  wire _263_;
  wire _264_;
  wire _265_;
  wire _266_;
  wire _267_;
  wire [7:0] _268_;
  wire [7:0] _269_;
  wire [3:0] _270_;
  reg [3:0] _271_;
  wire _272_;
  wire _273_;
  wire _274_;
  wire _275_;
  wire _276_;
  wire _277_;
  wire _278_;
  wire _279_;
  wire _280_;
  wire _281_;
  wire _282_;
  wire _283_;
  wire _284_;
  wire _285_;
  wire _286_;
  wire _287_;
  wire _288_;
  wire _289_;
  wire _290_;
  wire _291_;
  wire _292_;
  wire _293_;
  wire [5:0] _294_;
  wire [5:0] _295_;
  wire [5:0] _296_;
  wire _297_;
  wire _298_;
  input CLK;
  input CTSN;
  input DCDN;
  input DSRN;
  output DTRN;
  output INT;
  output OUT1N;
  output OUT2N;
  input [2:0] PADDR;
  input PENABLE;
  output [31:0] PRDATA;
  output PREADY;
  input PSEL;
  output PSLVERR;
  input [31:0] PWDATA;
  input PWRITE;
  input RIN;
  input RSTN;
  output RTSN;
  input SIN;
  output SOUT;
  reg ibaudoutn;
  reg ichartimeout;
  reg [7:0] idll;
  wire idllwrite;
  reg [7:0] idlm;
  wire idlmwrite;
  reg ifcr_fifo64e;
  reg ifcr_fifoenable;
  reg ifcr_rxfiforeset;
  reg [1:0] ifcr_rxtrigger;
  reg ifcr_txfiforeset;
  wire ifcrwrite;
  reg [6:0] ifecounter;
  wire ifedecrement;
  wire ifeincrement;
  wire iierwrite;
  wire iiirread;
  reg [7:0] ilcr;
  wire ilcrwrite;
  reg ilsr_bi;
  wire ilsr_dr;
  reg ilsr_fe;
  reg ilsr_fifoerr;
  reg ilsr_oe;
  reg ilsr_pe;
  wire ilsr_temt;
  wire ilsr_thre;
  wire ilsr_thrnf;
  wire ilsrread;
  wire imcrwrite;
  wire imsr_cts;
  wire imsr_dcd;
  reg imsr_dcts;
  reg imsr_ddcd;
  reg imsr_ddsr;
  wire imsr_dsr;
  wire imsr_ri;
  reg imsr_teri;
  wire imsrread;
  wire irbrread;
  wire irdainterrupt;
  wire iread;
  wire irst;
  reg irts;
  wire irxfifo16trigger;
  wire irxfifo64trigger;
  wire irxfifobi;
  reg irxfifoclear;
  reg [10:0] irxfifod;
  wire irxfifofe;
  wire irxfifofull;
  wire irxfifope;
  wire irxfiforead;
  wire irxfifotrigger;
  reg irxfifowrite;
  reg [7:0] iscr;
  wire iscrwrite;
  wire isin;
  reg ithrinterrupt;
  wire ithrwrite;
  reg [5:0] itimeoutcount;
  reg [7:0] itsr;
  wire itxenable;
  wire itxfifoclear;
  wire itxfifofull;
  reg itxfiforead;
  wire itxfifowrite;
  reg itxrunning;
  reg itxstart;
  wire iwrite;
  wire \uart_bg16:614 ;
  wire \uart_bg2:617 ;
  wire \uart_bidet:459 ;
  wire \uart_ed_cts:539 ;
  wire \uart_ed_cts:540 ;
  wire \uart_ed_dcd:557 ;
  wire \uart_ed_dcd:558 ;
  wire \uart_ed_dsr:545 ;
  wire \uart_ed_dsr:546 ;
  wire \uart_ed_ri:552 ;
  wire \uart_fedet:454 ;
  wire \uart_if_cts:119 ;
  wire \uart_if_dcd:125 ;
  wire \uart_if_dsr:122 ;
  wire \uart_if_ri:128 ;
  wire [3:0] \uart_iic:169 ;
  wire \uart_iic:170 ;
  wire \uart_iic_thre_ed:175 ;
  wire \uart_is_cts:107 ;
  wire \uart_is_dcd:113 ;
  wire \uart_is_dsr:110 ;
  wire \uart_is_ri:116 ;
  wire \uart_is_sin:104 ;
  wire \uart_pedet:449 ;
  wire \uart_rclk:620 ;
  wire \uart_rx:739 ;
  wire \uart_rx:740 ;
  wire \uart_rx:741 ;
  wire [7:0] \uart_rx:742 ;
  wire \uart_rx:743 ;
  wire [10:0] \uart_rxff:653 ;
  wire \uart_rxff:654 ;
  wire \uart_rxff:655 ;
  wire [5:0] \uart_rxff:656 ;
  reg \uart_rxproc.state  = 1'h0;
  wire \uart_tx:732 ;
  wire \uart_tx:733 ;
  wire [7:0] \uart_txff:626 ;
  wire \uart_txff:627 ;
  wire \uart_txff:628 ;
  wire [5:0] \uart_txff:629 ;
  reg [1:0] \uart_txproc.state  = 2'h0;
  assign _000_ = PSEL & PENABLE;
  assign _265_ = PADDR == 3'h7;
  assign _266_ = iwrite & _265_;
  assign iscrwrite = _266_ ? 1'h1 : 1'h0;
  assign _084_ = _000_ & PWRITE;
  assign iwrite = _084_ ? 1'h1 : 1'h0;
  assign _268_ = idllwrite ? PWDATA[7:0] : idll;
  always @(posedge CLK, posedge irst)
    if (irst) idll <= 8'h00;
    else idll <= _268_;
  assign _269_ = idlmwrite ? PWDATA[7:0] : idlm;
  always @(posedge CLK, posedge irst)
    if (irst) idlm <= 8'h00;
    else idlm <= _269_;
  assign _244_ = PSEL & PENABLE;
  assign _270_ = iierwrite ? PWDATA[3:0] : _271_;
  assign _264_ = ~ PWRITE;
  always @(posedge CLK, posedge irst)
    if (irst) _271_ <= 4'h0;
    else _271_ <= _270_;
  assign _267_ = _244_ & _264_;
  assign iread = _267_ ? 1'h1 : 1'h0;
  assign _273_ = \uart_iic_thre_ed:175  | ifcr_txfiforeset;
  assign _274_ = iierwrite & PWDATA[1];
  assign _275_ = _274_ & ilsr_thre;
  assign _276_ = _273_ | _275_;
  assign _277_ = \uart_iic:169 [3:1] == 3'h1;
  assign _278_ = iiirread & _277_;
  assign _279_ = _278_ | ithrwrite;
  assign _281_ = _279_ ? 1'h0 : ithrinterrupt;
  assign _282_ = _276_ ? 1'h1 : _281_;
  always @(posedge CLK, posedge irst)
    if (irst) ithrinterrupt <= 1'h0;
    else ithrinterrupt <= _282_;
  assign _283_ = ~ ifcr_fifoenable;
  assign _284_ = _283_ & ilsr_dr;
  assign _285_ = ifcr_fifoenable & irxfifotrigger;
  assign _286_ = _284_ | _285_;
  assign irdainterrupt = _286_ ? 1'h1 : 1'h0;
  assign _280_ = ~ RSTN;
  assign _287_ = ifcr_fifoenable ? ifcr_fifo64e : 1'h0;
  assign _288_ = \uart_rxff:654  | irbrread;
  assign _289_ = _288_ | irxfifowrite;
  assign irst = _280_ ? 1'h1 : 1'h0;
  assign _290_ = ~ \uart_rxff:654 ;
  assign _291_ = _290_ & \uart_bg2:617 ;
  assign _292_ = ~ itimeoutcount[5];
  assign _293_ = _291_ & _292_;
  assign _294_ = itimeoutcount + 6'h01;
  assign _295_ = _293_ ? _294_ : itimeoutcount;
  assign _296_ = _289_ ? 6'h00 : _295_;
  assign _297_ = itimeoutcount[5] ? 1'h1 : ichartimeout;
  assign _298_ = irbrread ? 1'h0 : _297_;
  assign _002_ = ifcr_fifoenable ? _298_ : 1'h0;
  always @(posedge CLK, posedge irst)
    if (irst) itimeoutcount <= 6'h00;
    else itimeoutcount <= _296_;
  always @(posedge CLK, posedge irst)
    if (irst) ichartimeout <= 1'h0;
    else ichartimeout <= _002_;
  assign _003_ = ~ ifcr_fifoenable;
  assign _004_ = _003_ & PWDATA[0];
  assign _005_ = PWDATA[1] | _004_;
  assign _006_ = ~ PWDATA[0];
  assign _001_ = PADDR == 3'h0;
  assign _007_ = ifcr_fifoenable & _006_;
  assign _008_ = _005_ | _007_;
  assign _009_ = _008_ ? 1'h1 : 1'h0;
  assign _011_ = ~ ifcr_fifoenable;
  assign _012_ = _011_ & PWDATA[0];
  assign _013_ = PWDATA[2] | _012_;
  assign _010_ = iread & _001_;
  assign _014_ = ~ PWDATA[0];
  assign _015_ = ifcr_fifoenable & _014_;
  assign _016_ = _013_ | _015_;
  assign _017_ = _016_ ? 1'h1 : 1'h0;
  assign _018_ = ifcrwrite ? _009_ : 1'h0;
  assign _021_ = ~ ilcr[7];
  assign _019_ = ifcrwrite ? _017_ : 1'h0;
  assign _020_ = ifcrwrite & ilcr[7];
  assign _026_ = _010_ & _021_;
  assign irbrread = _026_ ? 1'h1 : 1'h0;
  assign _022_ = ifcrwrite ? PWDATA[0] : ifcr_fifoenable;
  always @(posedge CLK, posedge irst)
    if (irst) ifcr_fifoenable <= 1'h0;
    else ifcr_fifoenable <= _022_;
  always @(posedge CLK, posedge irst)
    if (irst) ifcr_rxfiforeset <= 1'h0;
    else ifcr_rxfiforeset <= _018_;
  always @(posedge CLK, posedge irst)
    if (irst) ifcr_txfiforeset <= 1'h0;
    else ifcr_txfiforeset <= _019_;
  assign _023_ = _020_ ? PWDATA[5] : ifcr_fifo64e;
  always @(posedge CLK, posedge irst)
    if (irst) ifcr_fifo64e <= 1'h0;
    else ifcr_fifo64e <= _023_;
  assign _024_ = ifcrwrite ? PWDATA[7:6] : ifcr_rxtrigger;
  always @(posedge CLK, posedge irst)
    if (irst) ifcr_rxtrigger <= 2'h0;
    else ifcr_rxtrigger <= _024_;
  assign _025_ = ilcrwrite ? PWDATA[7:0] : ilcr;
  always @(posedge CLK, posedge irst)
    if (irst) ilcr <= 8'h00;
    else ilcr <= _025_;
  assign _047_ = PADDR == 3'h0;
  assign _027_ = imcrwrite ? PWDATA[5:0] : _028_;
  always @(posedge CLK, posedge irst)
    if (irst) _028_ <= 6'h00;
    else _028_ <= _027_;
  assign _058_ = iwrite & _047_;
  assign _029_ = ~ ifcr_fifoenable;
  assign _030_ = _029_ & ilsr_dr;
  assign _031_ = _030_ & \uart_rx:743 ;
  assign _062_ = ~ ilcr[7];
  assign _032_ = ifcr_fifoenable & irxfifofull;
  assign _033_ = _032_ & \uart_rx:743 ;
  assign _034_ = _031_ | _033_;
  assign _035_ = ilsrread ? 1'h0 : ilsr_oe;
  assign _036_ = _034_ ? 1'h1 : _035_;
  assign _037_ = ilsrread ? 1'h0 : ilsr_pe;
  assign _068_ = _058_ & _062_;
  assign _038_ = \uart_pedet:449  ? 1'h1 : _037_;
  assign _039_ = ilsrread ? 1'h0 : ilsr_fe;
  assign _040_ = \uart_fedet:454  ? 1'h1 : _039_;
  assign _041_ = ilsrread ? 1'h0 : ilsr_bi;
  assign _042_ = \uart_bidet:459  ? 1'h1 : _041_;
  assign ithrwrite = _068_ ? 1'h1 : 1'h0;
  assign _043_ = { 25'h0000000, ifecounter } != 32'd0;
  assign _044_ = \uart_rxff:653 [10:8] == 3'h0;
  assign _045_ = \uart_rxff:654  | _044_;
  assign _046_ = _045_ ? 1'h0 : ilsr_fifoerr;
  assign _048_ = _043_ ? 1'h1 : _046_;
  assign _049_ = ~ ifedecrement;
  assign _050_ = ifeincrement & _049_;
  assign _051_ = { 25'h0000000, ifecounter } + 32'd1;
  assign _052_ = ~ ifeincrement;
  assign _053_ = _052_ & ifedecrement;
  assign _054_ = { 25'h0000000, ifecounter } - 32'd1;
  assign _055_ = _053_ ? _054_[6:0] : ifecounter;
  assign _056_ = _050_ ? _051_[6:0] : _055_;
  assign _057_ = irxfifoclear ? 7'h00 : _056_;
  assign _085_ = PADDR == 3'h0;
  always @(posedge CLK, posedge irst)
    if (irst) ilsr_oe <= 1'h0;
    else ilsr_oe <= _036_;
  always @(posedge CLK, posedge irst)
    if (irst) ilsr_pe <= 1'h0;
    else ilsr_pe <= _038_;
  always @(posedge CLK, posedge irst)
    if (irst) ilsr_fe <= 1'h0;
    else ilsr_fe <= _040_;
  always @(posedge CLK, posedge irst)
    if (irst) ilsr_bi <= 1'h0;
    else ilsr_bi <= _042_;
  always @(posedge CLK, posedge irst)
    if (irst) ilsr_fifoerr <= 1'h0;
    else ilsr_fifoerr <= _048_;
  assign _095_ = iwrite & _085_;
  always @(posedge CLK, posedge irst)
    if (irst) ifecounter <= 7'h00;
    else ifecounter <= _057_;
  assign _059_ = ~ \uart_rxff:654 ;
  assign _060_ = _059_ & \uart_rxff:653 [8];
  assign irxfifope = _060_ ? 1'h1 : 1'h0;
  assign _061_ = ~ \uart_rxff:654 ;
  assign _104_ = _095_ & ilcr[7];
  assign _063_ = _061_ & \uart_rxff:653 [9];
  assign irxfifofe = _063_ ? 1'h1 : 1'h0;
  assign _064_ = ~ \uart_rxff:654 ;
  assign _065_ = _064_ & \uart_rxff:653 [10];
  assign irxfifobi = _065_ ? 1'h1 : 1'h0;
  assign idllwrite = _104_ ? 1'h1 : 1'h0;
  assign _070_ = irxfifod[10:8] != 3'h0;
  assign _071_ = irxfifowrite & _070_;
  assign ifeincrement = _071_ ? 1'h1 : 1'h0;
  assign _072_ = { 25'h0000000, ifecounter } != 32'd0;
  assign _073_ = ~ \uart_rxff:654 ;
  assign _074_ = _072_ & _073_;
  assign _075_ = \uart_pedet:449  | \uart_fedet:454 ;
  assign _076_ = _075_ | \uart_bidet:459 ;
  assign _077_ = _074_ & _076_;
  assign ifedecrement = _077_ ? 1'h1 : 1'h0;
  assign _078_ = ifcr_fifoenable & ilsr_fifoerr;
  assign _079_ = _078_ ? 1'h1 : 1'h0;
  assign _080_ = ~ \uart_rxff:654 ;
  assign _081_ = _080_ | irxfifowrite;
  assign ilsr_dr = _081_ ? 1'h1 : 1'h0;
  assign _116_ = PADDR == 3'h1;
  assign ilsr_thre = \uart_txff:627  ? 1'h1 : 1'h0;
  assign _082_ = ~ itxrunning;
  assign _083_ = _082_ & ilsr_thre;
  assign ilsr_temt = _083_ ? 1'h1 : 1'h0;
  assign _126_ = iwrite & _116_;
  assign _086_ = ~ ifcr_fifoenable;
  assign _087_ = _086_ & \uart_txff:627 ;
  assign _088_ = ~ itxfifofull;
  assign _089_ = ifcr_fifoenable & _088_;
  assign _090_ = _087_ | _089_;
  assign ilsr_thrnf = _090_ ? 1'h1 : 1'h0;
  assign _091_ = _028_[4] & irts;
  assign _092_ = ~ _028_[4];
  assign _129_ = _126_ & ilcr[7];
  assign _093_ = ~ \uart_if_cts:119 ;
  assign _094_ = _092_ & _093_;
  assign _096_ = _091_ | _094_;
  assign imsr_cts = _096_ ? 1'h1 : 1'h0;
  assign _097_ = _028_[4] & _028_[0];
  assign _098_ = ~ _028_[4];
  assign _099_ = ~ \uart_if_dsr:122 ;
  assign _100_ = _098_ & _099_;
  assign idlmwrite = _129_ ? 1'h1 : 1'h0;
  assign _101_ = _097_ | _100_;
  assign imsr_dsr = _101_ ? 1'h1 : 1'h0;
  assign _102_ = _028_[4] & _028_[2];
  assign _103_ = ~ _028_[4];
  assign _105_ = ~ \uart_if_ri:128 ;
  assign _106_ = _103_ & _105_;
  assign _107_ = _102_ | _106_;
  assign imsr_ri = _107_ ? 1'h1 : 1'h0;
  assign _108_ = _028_[4] & _028_[3];
  assign _109_ = ~ _028_[4];
  assign _110_ = ~ \uart_if_dcd:125 ;
  assign _111_ = _109_ & _110_;
  assign _112_ = _108_ | _111_;
  assign imsr_dcd = _112_ ? 1'h1 : 1'h0;
  assign _138_ = PADDR == 3'h1;
  assign _114_ = \uart_ed_cts:539  | \uart_ed_cts:540 ;
  assign _115_ = imsrread ? 1'h0 : imsr_dcts;
  assign _117_ = _114_ ? 1'h1 : _115_;
  assign _149_ = iwrite & _138_;
  assign _118_ = \uart_ed_dsr:545  | \uart_ed_dsr:546 ;
  assign _119_ = imsrread ? 1'h0 : imsr_ddsr;
  assign _120_ = _118_ ? 1'h1 : _119_;
  assign _121_ = imsrread ? 1'h0 : imsr_teri;
  assign _122_ = \uart_ed_ri:552  ? 1'h1 : _121_;
  assign _123_ = \uart_ed_dcd:557  | \uart_ed_dcd:558 ;
  assign _159_ = ~ ilcr[7];
  assign _124_ = imsrread ? 1'h0 : imsr_ddcd;
  assign _125_ = _123_ ? 1'h1 : _124_;
  assign _170_ = _149_ & _159_;
  always @(posedge CLK, posedge irst)
    if (irst) imsr_dcts <= 1'h0;
    else imsr_dcts <= _117_;
  always @(posedge CLK, posedge irst)
    if (irst) imsr_ddsr <= 1'h0;
    else imsr_ddsr <= _120_;
  always @(posedge CLK, posedge irst)
    if (irst) imsr_teri <= 1'h0;
    else imsr_teri <= _122_;
  assign iierwrite = _170_ ? 1'h1 : 1'h0;
  always @(posedge CLK, posedge irst)
    if (irst) imsr_ddcd <= 1'h0;
    else imsr_ddcd <= _125_;
  assign _127_ = iscrwrite ? PWDATA[7:0] : iscr;
  always @(posedge CLK, posedge irst)
    if (irst) iscr <= 8'h00;
    else iscr <= _127_;
  assign _130_ = ~ ifcr_fifo64e;
  assign _181_ = PADDR == 3'h2;
  assign itxfifofull = _130_ ? \uart_txff:629 [4] : \uart_txff:628 ;
  assign _131_ = ~ ifcr_fifoenable;
  assign _132_ = _131_ & \uart_txff:627 ;
  assign _133_ = ~ itxfifofull;
  assign _134_ = ifcr_fifoenable & _133_;
  assign _135_ = _132_ | _134_;
  assign _136_ = _135_ & ithrwrite;
  assign itxfifowrite = _136_ ? 1'h1 : 1'h0;
  assign _191_ = iread & _181_;
  assign itxfifoclear = ifcr_txfiforeset ? 1'h1 : 1'h0;
  assign iiirread = _191_ ? 1'h1 : 1'h0;
  assign irxfiforead = irbrread ? 1'h1 : 1'h0;
  assign _137_ = ~ ifcr_fifo64e;
  assign irxfifofull = _137_ ? \uart_rxff:656 [4] : \uart_rxff:655 ;
  assign _139_ = ifcr_rxtrigger == 2'h0;
  assign _140_ = ~ \uart_rxff:654 ;
  assign _141_ = _139_ & _140_;
  assign _142_ = ifcr_rxtrigger == 2'h1;
  assign _143_ = \uart_rxff:656 [2] | \uart_rxff:656 [3];
  assign _144_ = _142_ & _143_;
  assign _145_ = _141_ | _144_;
  assign _146_ = ifcr_rxtrigger == 2'h2;
  assign _147_ = _146_ & \uart_rxff:656 [3];
  assign _148_ = _145_ | _147_;
  assign _150_ = ifcr_rxtrigger == 2'h3;
  assign _151_ = _150_ & \uart_rxff:656 [3];
  assign _152_ = _151_ & \uart_rxff:656 [2];
  assign _153_ = _152_ & \uart_rxff:656 [1];
  assign _154_ = _148_ | _153_;
  assign _155_ = _154_ | \uart_rxff:656 [4];
  assign irxfifo16trigger = _155_ ? 1'h1 : 1'h0;
  assign _207_ = PADDR == 3'h2;
  assign _156_ = ifcr_rxtrigger == 2'h0;
  assign _157_ = ~ \uart_rxff:654 ;
  assign _158_ = _156_ & _157_;
  assign _160_ = ifcr_rxtrigger == 2'h1;
  assign _214_ = iwrite & _207_;
  assign _161_ = \uart_rxff:656 [4] | \uart_rxff:656 [5];
  assign _162_ = _160_ & _161_;
  assign _163_ = _158_ | _162_;
  assign _164_ = ifcr_rxtrigger == 2'h2;
  assign _165_ = _164_ & \uart_rxff:656 [5];
  assign _166_ = _163_ | _165_;
  assign _167_ = ifcr_rxtrigger == 2'h3;
  assign ifcrwrite = _214_ ? 1'h1 : 1'h0;
  assign _168_ = _167_ & \uart_rxff:656 [5];
  assign _169_ = _168_ & \uart_rxff:656 [4];
  assign _171_ = _169_ & \uart_rxff:656 [3];
  assign _172_ = _166_ | _171_;
  assign _173_ = _172_ | \uart_rxff:655 ;
  assign irxfifo64trigger = _173_ ? 1'h1 : 1'h0;
  assign _174_ = ~ ifcr_fifo64e;
  assign irxfifotrigger = _174_ ? irxfifo16trigger : irxfifo64trigger;
  assign _175_ = ~ _028_[4];
  assign isin = _175_ ? \uart_is_sin:104  : \uart_tx:733 ;
  assign _176_ = ~ \uart_txff:627 ;
  assign _177_ = ~ _028_[5];
  assign _234_ = PADDR == 3'h3;
  assign _178_ = _028_[5] & imsr_cts;
  assign _179_ = _177_ | _178_;
  assign _180_ = _176_ & _179_;
  assign itxenable = _180_ ? 1'h1 : 1'h0;
  assign _245_ = iwrite & _234_;
  assign _182_ = itxenable ? 1'h1 : 1'h0;
  assign _183_ = itxenable ? 2'h1 : 2'h0;
  assign _184_ = \uart_txproc.state  == 2'h0;
  assign _185_ = \uart_txproc.state  == 2'h1;
  assign ilcrwrite = _245_ ? 1'h1 : 1'h0;
  assign _186_ = \uart_tx:732  ? 2'h3 : 2'h2;
  assign _187_ = \uart_txproc.state  == 2'h2;
  assign _188_ = \uart_txproc.state  == 2'h3;
  function [7:0] \786 ;
    input [7:0] a;
    input [31:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \786  = b[7:0];
      4'b??1?:
        \786  = b[15:8];
      4'b?1??:
        \786  = b[23:16];
      4'b1???:
        \786  = b[31:24];
      default:
        \786  = a;
    endcase
  endfunction
  assign _189_ = \786 (itsr, { itsr, itsr, \uart_txff:626 , itsr }, { _188_, _187_, _185_, _184_ });
  function [0:0] \789 ;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \789  = b[0:0];
      4'b??1?:
        \789  = b[1:1];
      4'b?1??:
        \789  = b[2:2];
      4'b1???:
        \789  = b[3:3];
      default:
        \789  = a;
    endcase
  endfunction
  assign _190_ = \789 (1'h0, 4'h2, { _188_, _187_, _185_, _184_ });
  function [0:0] \794 ;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \794  = b[0:0];
      4'b??1?:
        \794  = b[1:1];
      4'b?1??:
        \794  = b[2:2];
      4'b1???:
        \794  = b[3:3];
      default:
        \794  = a;
    endcase
  endfunction
  assign _192_ = \794 (1'h0, { 3'h3, _182_ }, { _188_, _187_, _185_, _184_ });
  function [0:0] \798 ;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \798  = b[0:0];
      4'b??1?:
        \798  = b[1:1];
      4'b?1??:
        \798  = b[2:2];
      4'b1???:
        \798  = b[3:3];
      default:
        \798  = a;
    endcase
  endfunction
  assign _193_ = \798 (1'h0, 4'h4, { _188_, _187_, _185_, _184_ });
  function [1:0] \803 ;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \803  = b[1:0];
      4'b??1?:
        \803  = b[3:2];
      4'b?1??:
        \803  = b[5:4];
      4'b1???:
        \803  = b[7:6];
      default:
        \803  = a;
    endcase
  endfunction
  assign _194_ = \803 (2'h0, { 2'h0, _186_, 2'h2, _183_ }, { _188_, _187_, _185_, _184_ });
  assign _258_ = PADDR == 3'h4;
  always @(posedge CLK, posedge irst)
    if (irst) itsr <= 8'h00;
    else itsr <= _189_;
  always @(posedge CLK, posedge irst)
    if (irst) itxfiforead <= 1'h0;
    else itxfiforead <= _190_;
  always @(posedge CLK, posedge irst)
    if (irst) itxstart <= 1'h0;
    else itxstart <= _192_;
  always @(posedge CLK, posedge irst)
    if (irst) itxrunning <= 1'h0;
    else itxrunning <= _193_;
  always @(posedge CLK, posedge irst)
    if (irst) \uart_txproc.state  <= 2'h0;
    else \uart_txproc.state  <= _194_;
  assign _259_ = iwrite & _258_;
  assign _195_ = ~ ifcr_fifoenable;
  assign _196_ = _197_ ? 1'h1 : ifcr_rxfiforeset;
  assign _197_ = \uart_rx:743  & _195_;
  assign _198_ = \uart_rx:743  ? { \uart_rx:741 , \uart_rx:740 , \uart_rx:739 , \uart_rx:742  } : irxfifod;
  assign _199_ = \uart_rx:743  ? 1'h1 : 1'h0;
  assign imcrwrite = _259_ ? 1'h1 : 1'h0;
  assign _200_ = \uart_rxproc.state  == 1'h0;
  assign _201_ = ~ ifcr_fifoenable;
  assign _202_ = ~ irxfifofull;
  assign _203_ = _202_ ? 1'h1 : 1'h0;
  assign _204_ = _201_ ? 1'h1 : _203_;
  assign _205_ = \uart_rxproc.state  == 1'h1;
  function [0:0] \851 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \851  = b[0:0];
      2'b1?:
        \851  = b[1:1];
      default:
        \851  = a;
    endcase
  endfunction
  assign _206_ = \851 (ifcr_rxfiforeset, { ifcr_rxfiforeset, _196_ }, { _205_, _200_ });
  function [0:0] \853 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \853  = b[0:0];
      2'b1?:
        \853  = b[1:1];
      default:
        \853  = a;
    endcase
  endfunction
  assign _208_ = \853 (1'h0, { _204_, 1'h0 }, { _205_, _200_ });
  function [10:0] \855 ;
    input [10:0] a;
    input [21:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \855  = b[10:0];
      2'b1?:
        \855  = b[21:11];
      default:
        \855  = a;
    endcase
  endfunction
  assign _209_ = \855 (irxfifod, { irxfifod, _198_ }, { _205_, _200_ });
  function [0:0] \858 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \858  = b[0:0];
      2'b1?:
        \858  = b[1:1];
      default:
        \858  = a;
    endcase
  endfunction
  assign _210_ = \858 (1'h0, { 1'h0, _199_ }, { _205_, _200_ });
  always @(posedge CLK, posedge irst)
    if (irst) irxfifoclear <= 1'h0;
    else irxfifoclear <= _206_;
  always @(posedge CLK, posedge irst)
    if (irst) irxfifowrite <= 1'h0;
    else irxfifowrite <= _208_;
  always @(posedge CLK, posedge irst)
    if (irst) irxfifod <= 11'h000;
    else irxfifod <= _209_;
  always @(posedge CLK, posedge irst)
    if (irst) \uart_rxproc.state  <= 1'h0;
    else \uart_rxproc.state  <= _210_;
  assign _211_ = ~ _028_[1];
  assign _212_ = _028_[5] & irxfifotrigger;
  assign _260_ = PADDR == 3'h5;
  assign _213_ = _211_ | _212_;
  assign _215_ = ~ _028_[5];
  assign _216_ = _028_[5] & \uart_rxff:654 ;
  assign _217_ = _215_ | _216_;
  assign _218_ = _028_[1] & _217_;
  assign _219_ = _218_ ? 1'h1 : irts;
  assign _220_ = _213_ ? 1'h0 : _219_;
  assign _261_ = iread & _260_;
  always @(posedge CLK, posedge irst)
    if (irst) irts <= 1'h0;
    else irts <= _220_;
  assign _221_ = ~ \uart_bg16:614 ;
  assign _222_ = _221_ ? 1'h1 : 1'h0;
  assign ilsrread = _261_ ? 1'h1 : 1'h0;
  assign _223_ = ~ _028_[2];
  assign _224_ = _028_[4] | _223_;
  assign _225_ = _224_ ? 1'h1 : 1'h0;
  assign _226_ = ~ _028_[3];
  assign _227_ = _028_[4] | _226_;
  assign _228_ = _227_ ? 1'h1 : 1'h0;
  assign _229_ = ~ irts;
  assign _230_ = _028_[4] | _229_;
  assign _231_ = _230_ ? 1'h1 : 1'h0;
  assign _232_ = ~ _028_[0];
  assign _233_ = _028_[4] | _232_;
  assign _235_ = _233_ ? 1'h1 : 1'h0;
  assign _236_ = _028_[4] | \uart_tx:733 ;
  assign _237_ = _236_ ? 1'h1 : 1'h0;
  assign _262_ = PADDR == 3'h6;
  always @(posedge CLK, posedge irst)
    if (irst) _238_ <= 1'h1;
    else _238_ <= _225_;
  assign _263_ = iread & _262_;
  always @(posedge CLK, posedge irst)
    if (irst) _239_ <= 1'h1;
    else _239_ <= _228_;
  always @(posedge CLK, posedge irst)
    if (irst) _240_ <= 1'h1;
    else _240_ <= _231_;
  always @(posedge CLK, posedge irst)
    if (irst) _241_ <= 1'h1;
    else _241_ <= _235_;
  always @(posedge CLK, posedge irst)
    if (irst) _242_ <= 1'h1;
    else _242_ <= _237_;
  always @(posedge CLK, posedge irst)
    if (irst) ibaudoutn <= 1'h1;
    else ibaudoutn <= _222_;
  assign _243_ = ~ ilcr[7];
  assign _246_ = _243_ ? \uart_rxff:653 [7:0] : idll;
  assign _247_ = PADDR == 3'h0;
  assign imsrread = _263_ ? 1'h1 : 1'h0;
  assign _248_ = ~ ilcr[7];
  assign _249_ = _248_ ? { 4'h0, _271_ } : idlm;
  assign _250_ = PADDR == 3'h1;
  assign _251_ = PADDR == 3'h2;
  assign _252_ = PADDR == 3'h3;
  assign _253_ = PADDR == 3'h4;
  assign _254_ = PADDR == 3'h5;
  assign _255_ = PADDR == 3'h6;
  assign _256_ = PADDR == 3'h7;
  function [7:0] \977 ;
    input [7:0] a;
    input [63:0] b;
    input [7:0] s;
    (* parallel_case *)
    casez (s)
      8'b???????1:
        \977  = b[7:0];
      8'b??????1?:
        \977  = b[15:8];
      8'b?????1??:
        \977  = b[23:16];
      8'b????1???:
        \977  = b[31:24];
      8'b???1????:
        \977  = b[39:32];
      8'b??1?????:
        \977  = b[47:40];
      8'b?1??????:
        \977  = b[55:48];
      8'b1???????:
        \977  = b[63:56];
      default:
        \977  = a;
    endcase
  endfunction
  assign _257_ = \977 (\uart_rxff:653 [7:0], { iscr, imsr_dcd, imsr_ri, imsr_dsr, imsr_cts, imsr_ddcd, imsr_teri, imsr_ddsr, imsr_dcts, _079_, ilsr_temt, ilsr_thrnf, ilsr_bi, ilsr_fe, ilsr_pe, ilsr_oe, ilsr_dr, 2'h0, _028_, ilcr, ifcr_fifoenable, ifcr_fifoenable, _287_, 1'h0, \uart_iic:169 , _249_, _246_ }, { _256_, _255_, _254_, _253_, _252_, _251_, _250_, _247_ });
  uart_baudgen uart_bg16 (
    .baudtick(\uart_bg16:614 ),
    .ce(1'h1),
    .clear(1'h0),
    .clk(CLK),
    .divider({ idlm, idll }),
    .rst(irst)
  );
  slib_clock_div_8 uart_bg2 (
    .ce(\uart_bg16:614 ),
    .clk(CLK),
    .q(\uart_bg2:617 ),
    .rst(irst)
  );
  slib_edge_detect uart_bidet (
    .clk(CLK),
    .d(irxfifobi),
    .fe(_069_),
    .re(\uart_bidet:459 ),
    .rst(irst)
  );
  slib_edge_detect uart_ed_cts (
    .clk(CLK),
    .d(imsr_cts),
    .fe(\uart_ed_cts:540 ),
    .re(\uart_ed_cts:539 ),
    .rst(irst)
  );
  slib_edge_detect uart_ed_dcd (
    .clk(CLK),
    .d(imsr_dcd),
    .fe(\uart_ed_dcd:558 ),
    .re(\uart_ed_dcd:557 ),
    .rst(irst)
  );
  slib_edge_detect uart_ed_dsr (
    .clk(CLK),
    .d(imsr_dsr),
    .fe(\uart_ed_dsr:546 ),
    .re(\uart_ed_dsr:545 ),
    .rst(irst)
  );
  slib_edge_detect uart_ed_ri (
    .clk(CLK),
    .d(imsr_ri),
    .fe(\uart_ed_ri:552 ),
    .re(_113_),
    .rst(irst)
  );
  slib_edge_detect uart_fedet (
    .clk(CLK),
    .d(irxfifofe),
    .fe(_067_),
    .re(\uart_fedet:454 ),
    .rst(irst)
  );
  slib_input_filter_2 uart_if_cts (
    .ce(\uart_bg2:617 ),
    .clk(CLK),
    .d(\uart_is_cts:107 ),
    .q(\uart_if_cts:119 ),
    .rst(irst)
  );
  slib_input_filter_2 uart_if_dcd (
    .ce(\uart_bg2:617 ),
    .clk(CLK),
    .d(\uart_is_dcd:113 ),
    .q(\uart_if_dcd:125 ),
    .rst(irst)
  );
  slib_input_filter_2 uart_if_dsr (
    .ce(\uart_bg2:617 ),
    .clk(CLK),
    .d(\uart_is_dsr:110 ),
    .q(\uart_if_dsr:122 ),
    .rst(irst)
  );
  slib_input_filter_2 uart_if_ri (
    .ce(\uart_bg2:617 ),
    .clk(CLK),
    .d(\uart_is_ri:116 ),
    .q(\uart_if_ri:128 ),
    .rst(irst)
  );
  uart_interrupt uart_iic (
    .afe(_028_[5]),
    .clk(CLK),
    .cti(ichartimeout),
    .ier(_271_),
    .iir(\uart_iic:169 ),
    .\int (\uart_iic:170 ),
    .lsr({ ilsr_bi, ilsr_fe, ilsr_pe, ilsr_oe, ilsr_dr }),
    .msr({ imsr_ddcd, imsr_teri, imsr_ddsr, imsr_dcts }),
    .rda(irdainterrupt),
    .rst(irst),
    .thi(ithrinterrupt)
  );
  slib_edge_detect uart_iic_thre_ed (
    .clk(CLK),
    .d(ilsr_thre),
    .fe(_272_),
    .re(\uart_iic_thre_ed:175 ),
    .rst(irst)
  );
  slib_input_sync uart_is_cts (
    .clk(CLK),
    .d(CTSN),
    .q(\uart_is_cts:107 ),
    .rst(irst)
  );
  slib_input_sync uart_is_dcd (
    .clk(CLK),
    .d(DCDN),
    .q(\uart_is_dcd:113 ),
    .rst(irst)
  );
  slib_input_sync uart_is_dsr (
    .clk(CLK),
    .d(DSRN),
    .q(\uart_is_dsr:110 ),
    .rst(irst)
  );
  slib_input_sync uart_is_ri (
    .clk(CLK),
    .d(RIN),
    .q(\uart_is_ri:116 ),
    .rst(irst)
  );
  slib_input_sync uart_is_sin (
    .clk(CLK),
    .d(SIN),
    .q(\uart_is_sin:104 ),
    .rst(irst)
  );
  slib_edge_detect uart_pedet (
    .clk(CLK),
    .d(irxfifope),
    .fe(_066_),
    .re(\uart_pedet:449 ),
    .rst(irst)
  );
  slib_edge_detect uart_rclk (
    .clk(CLK),
    .d(ibaudoutn),
    .fe(_128_),
    .re(\uart_rclk:620 ),
    .rst(irst)
  );
  uart_receiver uart_rx (
    .bi(\uart_rx:741 ),
    .clk(CLK),
    .dout(\uart_rx:742 ),
    .eps(ilcr[4]),
    .fe(\uart_rx:740 ),
    .pe(\uart_rx:739 ),
    .pen(ilcr[3]),
    .rst(irst),
    .rxclear(1'h0),
    .rxclk(\uart_rclk:620 ),
    .rxfinished(\uart_rx:743 ),
    .sin(isin),
    .sp(ilcr[5]),
    .stb(ilcr[2]),
    .wls(ilcr[1:0])
  );
  slib_fifo_11_6 uart_rxff (
    .clear(irxfifoclear),
    .clk(CLK),
    .d(irxfifod),
    .empty(\uart_rxff:654 ),
    .full(\uart_rxff:655 ),
    .q(\uart_rxff:653 ),
    .read(irxfiforead),
    .rst(irst),
    .usage(\uart_rxff:656 ),
    .write(irxfifowrite)
  );
  uart_transmitter uart_tx (
    .bc(ilcr[6]),
    .clear(1'h0),
    .clk(CLK),
    .din(itsr),
    .eps(ilcr[4]),
    .pen(ilcr[3]),
    .rst(irst),
    .sout(\uart_tx:733 ),
    .sp(ilcr[5]),
    .stb(ilcr[2]),
    .txclk(\uart_bg2:617 ),
    .txfinished(\uart_tx:732 ),
    .txstart(itxstart),
    .wls(ilcr[1:0])
  );
  slib_fifo_8_6 uart_txff (
    .clear(itxfifoclear),
    .clk(CLK),
    .d(PWDATA[7:0]),
    .empty(\uart_txff:627 ),
    .full(\uart_txff:628 ),
    .q(\uart_txff:626 ),
    .read(itxfiforead),
    .rst(irst),
    .usage(\uart_txff:629 ),
    .write(itxfifowrite)
  );
  assign PRDATA = { 24'h000000, _257_ };
  assign PREADY = 1'h1;
  assign PSLVERR = 1'h0;
  assign INT = \uart_iic:170 ;
  assign OUT1N = _238_;
  assign OUT2N = _239_;
  assign RTSN = _240_;
  assign DTRN = _241_;
  assign SOUT = _242_;
endmodule

module slib_clock_div_8(clk, rst, ce, q);
  wire _0_;
  wire [31:0] _1_;
  wire _2_;
  wire [2:0] _3_;
  wire _4_;
  wire [2:0] _5_;
  input ce;
  input clk;
  reg [2:0] icounter;
  reg iq;
  output q;
  input rst;
  assign _0_ = { 29'h00000000, icounter } == 32'd7;
  assign _1_ = { 29'h00000000, icounter } + 32'd1;
  assign _2_ = _0_ ? 1'h1 : 1'h0;
  assign _3_ = _0_ ? 3'h0 : _1_[2:0];
  assign _4_ = ce ? _2_ : 1'h0;
  always @(posedge clk, posedge rst)
    if (rst) iq <= 1'h0;
    else iq <= _4_;
  assign _5_ = ce ? _3_ : icounter;
  always @(posedge clk, posedge rst)
    if (rst) icounter <= 3'h0;
    else icounter <= _5_;
  assign q = iq;
endmodule

module slib_counter_4(clk, rst, clear, load, enable, down, d, q, overflow);
  wire _00_;
  wire [4:0] _01_;
  wire [4:0] _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire [3:0] _08_;
  wire [3:0] _09_;
  wire [3:0] _10_;
  wire [3:0] _11_;
  input clear;
  input clk;
  input [3:0] d;
  input down;
  input enable;
  reg [4:0] icounter;
  input load;
  output overflow;
  output [3:0] q;
  input rst;
  assign _00_ = ~ down;
  assign _01_ = icounter + 5'h01;
  assign _02_ = icounter - 5'h01;
  assign _03_ = _00_ ? _01_[4] : _02_[4];
  assign _04_ = enable ? _03_ : icounter[4];
  assign _05_ = load ? 1'h0 : _04_;
  assign _06_ = clear ? 1'h0 : _05_;
  assign _07_ = icounter[4] ? 1'h0 : _06_;
  assign _08_ = _00_ ? _01_[3:0] : _02_[3:0];
  assign _09_ = enable ? _08_ : icounter[3:0];
  assign _10_ = load ? d : _09_;
  assign _11_ = clear ? 4'h0 : _10_;
  always @(posedge clk, posedge rst)
    if (rst) icounter <= 5'h00;
    else icounter <= { _07_, _11_ };
  assign q = icounter[3:0];
  assign overflow = icounter[4];
endmodule

module slib_edge_detect(clk, rst, d, re, fe);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  wire _4_;
  wire _5_;
  input clk;
  input d;
  output fe;
  reg idd;
  output re;
  input rst;
  always @(posedge clk, posedge rst)
    if (rst) idd <= 1'h0;
    else idd <= d;
  assign _0_ = ~ idd;
  assign _1_ = _0_ & d;
  assign _2_ = _1_ ? 1'h1 : 1'h0;
  assign _3_ = ~ d;
  assign _4_ = idd & _3_;
  assign _5_ = _4_ ? 1'h1 : 1'h0;
  assign re = _2_;
  assign fe = _5_;
endmodule

module slib_fifo_11_6(clk, rst, clear, write, read, d, q, empty, full, usage);
  wire [10:0] _000_;
  wire [10:0] _001_;
  wire [10:0] _002_;
  wire [10:0] _003_;
  wire [10:0] _004_;
  wire [10:0] _005_;
  wire [10:0] _006_;
  wire [10:0] _007_;
  wire [10:0] _008_;
  wire [10:0] _009_;
  wire [10:0] _010_;
  wire [10:0] _011_;
  wire [10:0] _012_;
  wire [10:0] _013_;
  wire [10:0] _014_;
  wire [10:0] _015_;
  wire [10:0] _016_;
  wire [10:0] _017_;
  wire [10:0] _018_;
  wire [10:0] _019_;
  wire [10:0] _020_;
  wire [10:0] _021_;
  wire [10:0] _022_;
  wire [10:0] _023_;
  wire [10:0] _024_;
  wire [10:0] _025_;
  wire [10:0] _026_;
  wire [10:0] _027_;
  wire [10:0] _028_;
  wire [10:0] _029_;
  wire [10:0] _030_;
  wire [10:0] _031_;
  wire [10:0] _032_;
  wire [10:0] _033_;
  wire [10:0] _034_;
  wire [10:0] _035_;
  wire [10:0] _036_;
  wire [10:0] _037_;
  wire [10:0] _038_;
  wire [10:0] _039_;
  wire [10:0] _040_;
  wire [10:0] _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire [10:0] _103_;
  wire _104_;
  wire [10:0] _105_;
  wire _106_;
  wire [10:0] _107_;
  wire _108_;
  wire [10:0] _109_;
  wire _110_;
  wire [10:0] _111_;
  wire _112_;
  wire [10:0] _113_;
  wire _114_;
  wire [10:0] _115_;
  wire _116_;
  wire [10:0] _117_;
  wire _118_;
  wire [10:0] _119_;
  wire _120_;
  wire [10:0] _121_;
  wire _122_;
  wire [10:0] _123_;
  wire _124_;
  wire [10:0] _125_;
  wire _126_;
  wire [10:0] _127_;
  wire _128_;
  wire [10:0] _129_;
  wire _130_;
  wire [10:0] _131_;
  wire _132_;
  wire [10:0] _133_;
  wire _134_;
  wire [10:0] _135_;
  wire _136_;
  wire [10:0] _137_;
  wire _138_;
  wire [10:0] _139_;
  wire _140_;
  wire [10:0] _141_;
  wire _142_;
  wire [10:0] _143_;
  wire _144_;
  wire [10:0] _145_;
  wire _146_;
  wire [10:0] _147_;
  wire _148_;
  wire [10:0] _149_;
  wire _150_;
  wire [10:0] _151_;
  wire _152_;
  wire [10:0] _153_;
  wire _154_;
  wire [10:0] _155_;
  wire _156_;
  wire [10:0] _157_;
  wire _158_;
  wire [10:0] _159_;
  wire _160_;
  wire [10:0] _161_;
  wire _162_;
  wire [10:0] _163_;
  wire _164_;
  wire [10:0] _165_;
  wire _166_;
  wire [10:0] _167_;
  wire _168_;
  wire [10:0] _169_;
  wire _170_;
  wire [10:0] _171_;
  wire _172_;
  wire [10:0] _173_;
  wire _174_;
  wire [10:0] _175_;
  wire _176_;
  wire [10:0] _177_;
  wire _178_;
  wire [10:0] _179_;
  wire _180_;
  wire [10:0] _181_;
  wire _182_;
  wire [10:0] _183_;
  wire _184_;
  wire [10:0] _185_;
  wire _186_;
  wire [10:0] _187_;
  wire _188_;
  wire [10:0] _189_;
  wire _190_;
  wire [10:0] _191_;
  wire _192_;
  wire [10:0] _193_;
  wire _194_;
  wire [10:0] _195_;
  wire _196_;
  wire [10:0] _197_;
  wire _198_;
  wire [10:0] _199_;
  wire _200_;
  wire [10:0] _201_;
  wire _202_;
  wire [10:0] _203_;
  wire _204_;
  wire [10:0] _205_;
  wire _206_;
  wire [10:0] _207_;
  wire _208_;
  wire [10:0] _209_;
  wire _210_;
  wire [10:0] _211_;
  wire _212_;
  wire [10:0] _213_;
  wire _214_;
  wire [10:0] _215_;
  wire _216_;
  wire [10:0] _217_;
  wire _218_;
  wire [10:0] _219_;
  wire _220_;
  wire [10:0] _221_;
  wire _222_;
  wire [10:0] _223_;
  wire _224_;
  wire [10:0] _225_;
  wire _226_;
  wire [10:0] _227_;
  wire _228_;
  wire [10:0] _229_;
  wire [10:0] _230_;
  wire [10:0] _231_;
  wire [10:0] _232_;
  wire [10:0] _233_;
  wire [10:0] _234_;
  wire [10:0] _235_;
  wire [10:0] _236_;
  wire [10:0] _237_;
  wire [10:0] _238_;
  wire [10:0] _239_;
  wire [10:0] _240_;
  wire [10:0] _241_;
  wire [10:0] _242_;
  wire [10:0] _243_;
  wire [10:0] _244_;
  wire [10:0] _245_;
  wire [10:0] _246_;
  wire [10:0] _247_;
  wire [10:0] _248_;
  wire [10:0] _249_;
  wire [10:0] _250_;
  wire _251_;
  wire _252_;
  wire _253_;
  wire _254_;
  wire _255_;
  wire [6:0] _256_;
  wire [6:0] _257_;
  wire _258_;
  wire _259_;
  wire [6:0] _260_;
  wire [6:0] _261_;
  wire [6:0] _262_;
  wire [6:0] _263_;
  wire _264_;
  wire _265_;
  wire _266_;
  wire _267_;
  reg [10:0] _268_;
  wire _269_;
  wire _270_;
  wire _271_;
  wire _272_;
  wire [5:0] _273_;
  wire [5:0] _274_;
  wire _275_;
  wire _276_;
  wire _277_;
  wire _278_;
  wire [5:0] _279_;
  wire [5:0] _280_;
  wire [5:0] _281_;
  wire _282_;
  wire _283_;
  wire _284_;
  wire _285_;
  wire _286_;
  wire _287_;
  wire _288_;
  wire _289_;
  wire _290_;
  wire _291_;
  wire _292_;
  wire _293_;
  wire _294_;
  wire _295_;
  wire _296_;
  wire _297_;
  wire _298_;
  wire _299_;
  wire _300_;
  wire _301_;
  wire _302_;
  wire _303_;
  wire _304_;
  wire _305_;
  wire _306_;
  wire _307_;
  wire _308_;
  wire _309_;
  wire _310_;
  wire _311_;
  wire _312_;
  wire _313_;
  wire _314_;
  wire _315_;
  wire _316_;
  wire _317_;
  wire _318_;
  wire _319_;
  wire _320_;
  wire _321_;
  wire _322_;
  wire _323_;
  wire _324_;
  wire _325_;
  wire _326_;
  wire _327_;
  wire _328_;
  wire _329_;
  wire _330_;
  wire _331_;
  wire _332_;
  wire _333_;
  wire _334_;
  wire _335_;
  wire _336_;
  wire _337_;
  wire _338_;
  wire _339_;
  wire _340_;
  wire _341_;
  wire _342_;
  wire _343_;
  wire _344_;
  wire _345_;
  wire _346_;
  wire _347_;
  wire _348_;
  wire _349_;
  wire _350_;
  wire _351_;
  input clear;
  input clk;
  input [10:0] d;
  output empty;
  output full;
  reg iempty;
  reg [703:0] ififomem = 704'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  wire ifull;
  reg [6:0] irdaddr;
  reg [5:0] iusage;
  reg [6:0] iwraddr;
  output [10:0] q;
  input read;
  input rst;
  output [5:0] usage;
  input write;
  assign _000_ = irdaddr[0] ? ififomem[21:11] : ififomem[10:0];
  assign _001_ = irdaddr[0] ? ififomem[65:55] : ififomem[54:44];
  assign _002_ = irdaddr[0] ? ififomem[109:99] : ififomem[98:88];
  assign _003_ = irdaddr[0] ? ififomem[153:143] : ififomem[142:132];
  assign _004_ = irdaddr[0] ? ififomem[197:187] : ififomem[186:176];
  assign _005_ = irdaddr[0] ? ififomem[241:231] : ififomem[230:220];
  assign _006_ = irdaddr[0] ? ififomem[285:275] : ififomem[274:264];
  assign _007_ = irdaddr[0] ? ififomem[329:319] : ififomem[318:308];
  assign _008_ = irdaddr[0] ? ififomem[373:363] : ififomem[362:352];
  assign _009_ = irdaddr[0] ? ififomem[417:407] : ififomem[406:396];
  assign _010_ = irdaddr[0] ? ififomem[461:451] : ififomem[450:440];
  assign _011_ = irdaddr[0] ? ififomem[505:495] : ififomem[494:484];
  assign _012_ = irdaddr[0] ? ififomem[549:539] : ififomem[538:528];
  assign _013_ = irdaddr[0] ? ififomem[593:583] : ififomem[582:572];
  assign _014_ = irdaddr[0] ? ififomem[637:627] : ififomem[626:616];
  assign _015_ = irdaddr[0] ? ififomem[681:671] : ififomem[670:660];
  assign _016_ = irdaddr[2] ? _231_ : _230_;
  assign _017_ = irdaddr[2] ? _235_ : _234_;
  assign _018_ = irdaddr[2] ? _239_ : _238_;
  assign _019_ = irdaddr[2] ? _243_ : _242_;
  assign _020_ = irdaddr[4] ? _247_ : _246_;
  assign _021_ = irdaddr[0] ? ififomem[43:33] : ififomem[32:22];
  assign _022_ = irdaddr[0] ? ififomem[87:77] : ififomem[76:66];
  assign _023_ = irdaddr[0] ? ififomem[131:121] : ififomem[120:110];
  assign _024_ = irdaddr[0] ? ififomem[175:165] : ififomem[164:154];
  assign _025_ = irdaddr[0] ? ififomem[219:209] : ififomem[208:198];
  assign _026_ = irdaddr[0] ? ififomem[263:253] : ififomem[252:242];
  assign _027_ = irdaddr[0] ? ififomem[307:297] : ififomem[296:286];
  assign _028_ = irdaddr[0] ? ififomem[351:341] : ififomem[340:330];
  assign _029_ = irdaddr[0] ? ififomem[395:385] : ififomem[384:374];
  assign _030_ = irdaddr[0] ? ififomem[439:429] : ififomem[428:418];
  assign _031_ = irdaddr[0] ? ififomem[483:473] : ififomem[472:462];
  assign _032_ = irdaddr[0] ? ififomem[527:517] : ififomem[516:506];
  assign _033_ = irdaddr[0] ? ififomem[571:561] : ififomem[560:550];
  assign _034_ = irdaddr[0] ? ififomem[615:605] : ififomem[604:594];
  assign _035_ = irdaddr[0] ? ififomem[659:649] : ififomem[648:638];
  assign _036_ = irdaddr[0] ? ififomem[703:693] : ififomem[692:682];
  assign _037_ = irdaddr[2] ? _233_ : _232_;
  assign _038_ = irdaddr[2] ? _237_ : _236_;
  assign _039_ = irdaddr[2] ? _241_ : _240_;
  assign _040_ = irdaddr[2] ? _245_ : _244_;
  assign _041_ = irdaddr[4] ? _249_ : _248_;
  assign _230_ = irdaddr[1] ? _021_ : _000_;
  assign _231_ = irdaddr[1] ? _022_ : _001_;
  assign _232_ = irdaddr[1] ? _023_ : _002_;
  assign _233_ = irdaddr[1] ? _024_ : _003_;
  assign _234_ = irdaddr[1] ? _025_ : _004_;
  assign _235_ = irdaddr[1] ? _026_ : _005_;
  assign _236_ = irdaddr[1] ? _027_ : _006_;
  assign _237_ = irdaddr[1] ? _028_ : _007_;
  assign _238_ = irdaddr[1] ? _029_ : _008_;
  assign _239_ = irdaddr[1] ? _030_ : _009_;
  assign _240_ = irdaddr[1] ? _031_ : _010_;
  assign _241_ = irdaddr[1] ? _032_ : _011_;
  assign _242_ = irdaddr[1] ? _033_ : _012_;
  assign _243_ = irdaddr[1] ? _034_ : _013_;
  assign _244_ = irdaddr[1] ? _035_ : _014_;
  assign _245_ = irdaddr[1] ? _036_ : _015_;
  assign _246_ = irdaddr[3] ? _037_ : _016_;
  assign _247_ = irdaddr[3] ? _038_ : _017_;
  assign _248_ = irdaddr[3] ? _039_ : _018_;
  assign _249_ = irdaddr[3] ? _040_ : _019_;
  assign _250_ = irdaddr[5] ? _041_ : _020_;
  assign _251_ = irdaddr[5:0] == iwraddr[5:0];
  assign _252_ = irdaddr[6] != iwraddr[6];
  assign _253_ = _251_ & _252_;
  assign ifull = _253_ ? 1'h1 : 1'h0;
  assign _254_ = ~ ifull;
  assign _255_ = write & _254_;
  assign _256_ = iwraddr + 7'h01;
  assign _257_ = _255_ ? _256_ : iwraddr;
  assign _258_ = ~ iempty;
  assign _259_ = read & _258_;
  assign _260_ = irdaddr + 7'h01;
  assign _261_ = _259_ ? _260_ : irdaddr;
  assign _262_ = clear ? 7'h00 : _257_;
  assign _263_ = clear ? 7'h00 : _261_;
  assign _264_ = irdaddr == iwraddr;
  assign _265_ = _264_ ? 1'h1 : 1'h0;
  always @(posedge clk, posedge rst)
    if (rst) iempty <= 1'h1;
    else iempty <= _265_;
  always @(posedge clk, posedge rst)
    if (rst) iwraddr <= 7'h00;
    else iwraddr <= _262_;
  always @(posedge clk, posedge rst)
    if (rst) irdaddr <= 7'h00;
    else irdaddr <= _263_;
  assign _266_ = ~ ifull;
  assign _267_ = write & _266_;
  always @(posedge clk, posedge rst)
    if (rst) _268_ <= 11'h000;
    else _268_ <= _250_;
  always @(posedge clk, posedge rst)
    if (rst) ififomem <= 704'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    else ififomem <= { _229_, _227_, _225_, _223_, _221_, _219_, _217_, _215_, _213_, _211_, _209_, _207_, _205_, _203_, _201_, _199_, _197_, _195_, _193_, _191_, _189_, _187_, _185_, _183_, _181_, _179_, _177_, _175_, _173_, _171_, _169_, _167_, _165_, _163_, _161_, _159_, _157_, _155_, _153_, _151_, _149_, _147_, _145_, _143_, _141_, _139_, _137_, _135_, _133_, _131_, _129_, _127_, _125_, _123_, _121_, _119_, _117_, _115_, _113_, _111_, _109_, _107_, _105_, _103_ };
  assign _269_ = ~ read;
  assign _270_ = _269_ & write;
  assign _271_ = ~ ifull;
  assign _272_ = _270_ & _271_;
  assign _273_ = iusage + 6'h01;
  assign _274_ = _272_ ? _273_ : iusage;
  assign _275_ = ~ write;
  assign _276_ = _275_ & read;
  assign _277_ = ~ iempty;
  assign _278_ = _276_ & _277_;
  assign _279_ = iusage - 6'h01;
  assign _280_ = _278_ ? _279_ : _274_;
  assign _281_ = clear ? 6'h00 : _280_;
  always @(posedge clk, posedge rst)
    if (rst) iusage <= 6'h00;
    else iusage <= _281_;
  assign _282_ = ~ iwraddr[5];
  assign _283_ = ~ iwraddr[4];
  assign _284_ = _282_ & _283_;
  assign _285_ = _282_ & iwraddr[4];
  assign _286_ = iwraddr[5] & _283_;
  assign _287_ = iwraddr[5] & iwraddr[4];
  assign _288_ = ~ iwraddr[3];
  assign _289_ = _284_ & _288_;
  assign _290_ = _284_ & iwraddr[3];
  assign _291_ = _285_ & _288_;
  assign _292_ = _285_ & iwraddr[3];
  assign _293_ = _286_ & _288_;
  assign _294_ = _286_ & iwraddr[3];
  assign _295_ = _287_ & _288_;
  assign _296_ = _287_ & iwraddr[3];
  assign _297_ = ~ iwraddr[2];
  assign _298_ = _289_ & _297_;
  assign _299_ = _289_ & iwraddr[2];
  assign _300_ = _290_ & _297_;
  assign _301_ = _290_ & iwraddr[2];
  assign _302_ = _291_ & _297_;
  assign _303_ = _291_ & iwraddr[2];
  assign _304_ = _292_ & _297_;
  assign _305_ = _292_ & iwraddr[2];
  assign _306_ = _293_ & _297_;
  assign _307_ = _293_ & iwraddr[2];
  assign _308_ = _294_ & _297_;
  assign _309_ = _294_ & iwraddr[2];
  assign _310_ = _295_ & _297_;
  assign _311_ = _295_ & iwraddr[2];
  assign _312_ = _296_ & _297_;
  assign _313_ = _296_ & iwraddr[2];
  assign _314_ = ~ iwraddr[1];
  assign _315_ = _298_ & _314_;
  assign _316_ = _298_ & iwraddr[1];
  assign _317_ = _299_ & _314_;
  assign _318_ = _299_ & iwraddr[1];
  assign _319_ = _300_ & _314_;
  assign _320_ = _300_ & iwraddr[1];
  assign _321_ = _301_ & _314_;
  assign _322_ = _301_ & iwraddr[1];
  assign _323_ = _302_ & _314_;
  assign _324_ = _302_ & iwraddr[1];
  assign _325_ = _303_ & _314_;
  assign _326_ = _303_ & iwraddr[1];
  assign _327_ = _304_ & _314_;
  assign _328_ = _304_ & iwraddr[1];
  assign _329_ = _305_ & _314_;
  assign _330_ = _305_ & iwraddr[1];
  assign _331_ = _306_ & _314_;
  assign _332_ = _306_ & iwraddr[1];
  assign _333_ = _307_ & _314_;
  assign _334_ = _307_ & iwraddr[1];
  assign _335_ = _308_ & _314_;
  assign _336_ = _308_ & iwraddr[1];
  assign _337_ = _309_ & _314_;
  assign _338_ = _309_ & iwraddr[1];
  assign _339_ = _310_ & _314_;
  assign _340_ = _310_ & iwraddr[1];
  assign _341_ = _311_ & _314_;
  assign _342_ = _311_ & iwraddr[1];
  assign _343_ = _312_ & _314_;
  assign _344_ = _312_ & iwraddr[1];
  assign _345_ = _313_ & _314_;
  assign _346_ = _313_ & iwraddr[1];
  assign _347_ = ~ iwraddr[0];
  assign _348_ = _315_ & _347_;
  assign _349_ = _315_ & iwraddr[0];
  assign _350_ = _316_ & _347_;
  assign _351_ = _316_ & iwraddr[0];
  assign _042_ = _317_ & _347_;
  assign _043_ = _317_ & iwraddr[0];
  assign _044_ = _318_ & _347_;
  assign _045_ = _318_ & iwraddr[0];
  assign _046_ = _319_ & _347_;
  assign _047_ = _319_ & iwraddr[0];
  assign _048_ = _320_ & _347_;
  assign _049_ = _320_ & iwraddr[0];
  assign _050_ = _321_ & _347_;
  assign _051_ = _321_ & iwraddr[0];
  assign _052_ = _322_ & _347_;
  assign _053_ = _322_ & iwraddr[0];
  assign _054_ = _323_ & _347_;
  assign _055_ = _323_ & iwraddr[0];
  assign _056_ = _324_ & _347_;
  assign _057_ = _324_ & iwraddr[0];
  assign _058_ = _325_ & _347_;
  assign _059_ = _325_ & iwraddr[0];
  assign _060_ = _326_ & _347_;
  assign _061_ = _326_ & iwraddr[0];
  assign _062_ = _327_ & _347_;
  assign _063_ = _327_ & iwraddr[0];
  assign _064_ = _328_ & _347_;
  assign _065_ = _328_ & iwraddr[0];
  assign _066_ = _329_ & _347_;
  assign _067_ = _329_ & iwraddr[0];
  assign _068_ = _330_ & _347_;
  assign _069_ = _330_ & iwraddr[0];
  assign _070_ = _331_ & _347_;
  assign _071_ = _331_ & iwraddr[0];
  assign _072_ = _332_ & _347_;
  assign _073_ = _332_ & iwraddr[0];
  assign _074_ = _333_ & _347_;
  assign _075_ = _333_ & iwraddr[0];
  assign _076_ = _334_ & _347_;
  assign _077_ = _334_ & iwraddr[0];
  assign _078_ = _335_ & _347_;
  assign _079_ = _335_ & iwraddr[0];
  assign _080_ = _336_ & _347_;
  assign _081_ = _336_ & iwraddr[0];
  assign _082_ = _337_ & _347_;
  assign _083_ = _337_ & iwraddr[0];
  assign _084_ = _338_ & _347_;
  assign _085_ = _338_ & iwraddr[0];
  assign _086_ = _339_ & _347_;
  assign _087_ = _339_ & iwraddr[0];
  assign _088_ = _340_ & _347_;
  assign _089_ = _340_ & iwraddr[0];
  assign _090_ = _341_ & _347_;
  assign _091_ = _341_ & iwraddr[0];
  assign _092_ = _342_ & _347_;
  assign _093_ = _342_ & iwraddr[0];
  assign _094_ = _343_ & _347_;
  assign _095_ = _343_ & iwraddr[0];
  assign _096_ = _344_ & _347_;
  assign _097_ = _344_ & iwraddr[0];
  assign _098_ = _345_ & _347_;
  assign _099_ = _345_ & iwraddr[0];
  assign _100_ = _346_ & _347_;
  assign _101_ = _346_ & iwraddr[0];
  assign _102_ = _348_ & _267_;
  assign _103_ = _102_ ? d : ififomem[10:0];
  assign _104_ = _349_ & _267_;
  assign _105_ = _104_ ? d : ififomem[21:11];
  assign _106_ = _350_ & _267_;
  assign _107_ = _106_ ? d : ififomem[32:22];
  assign _108_ = _351_ & _267_;
  assign _109_ = _108_ ? d : ififomem[43:33];
  assign _110_ = _042_ & _267_;
  assign _111_ = _110_ ? d : ififomem[54:44];
  assign _112_ = _043_ & _267_;
  assign _113_ = _112_ ? d : ififomem[65:55];
  assign _114_ = _044_ & _267_;
  assign _115_ = _114_ ? d : ififomem[76:66];
  assign _116_ = _045_ & _267_;
  assign _117_ = _116_ ? d : ififomem[87:77];
  assign _118_ = _046_ & _267_;
  assign _119_ = _118_ ? d : ififomem[98:88];
  assign _120_ = _047_ & _267_;
  assign _121_ = _120_ ? d : ififomem[109:99];
  assign _122_ = _048_ & _267_;
  assign _123_ = _122_ ? d : ififomem[120:110];
  assign _124_ = _049_ & _267_;
  assign _125_ = _124_ ? d : ififomem[131:121];
  assign _126_ = _050_ & _267_;
  assign _127_ = _126_ ? d : ififomem[142:132];
  assign _128_ = _051_ & _267_;
  assign _129_ = _128_ ? d : ififomem[153:143];
  assign _130_ = _052_ & _267_;
  assign _131_ = _130_ ? d : ififomem[164:154];
  assign _132_ = _053_ & _267_;
  assign _133_ = _132_ ? d : ififomem[175:165];
  assign _134_ = _054_ & _267_;
  assign _135_ = _134_ ? d : ififomem[186:176];
  assign _136_ = _055_ & _267_;
  assign _137_ = _136_ ? d : ififomem[197:187];
  assign _138_ = _056_ & _267_;
  assign _139_ = _138_ ? d : ififomem[208:198];
  assign _140_ = _057_ & _267_;
  assign _141_ = _140_ ? d : ififomem[219:209];
  assign _142_ = _058_ & _267_;
  assign _143_ = _142_ ? d : ififomem[230:220];
  assign _144_ = _059_ & _267_;
  assign _145_ = _144_ ? d : ififomem[241:231];
  assign _146_ = _060_ & _267_;
  assign _147_ = _146_ ? d : ififomem[252:242];
  assign _148_ = _061_ & _267_;
  assign _149_ = _148_ ? d : ififomem[263:253];
  assign _150_ = _062_ & _267_;
  assign _151_ = _150_ ? d : ififomem[274:264];
  assign _152_ = _063_ & _267_;
  assign _153_ = _152_ ? d : ififomem[285:275];
  assign _154_ = _064_ & _267_;
  assign _155_ = _154_ ? d : ififomem[296:286];
  assign _156_ = _065_ & _267_;
  assign _157_ = _156_ ? d : ififomem[307:297];
  assign _158_ = _066_ & _267_;
  assign _159_ = _158_ ? d : ififomem[318:308];
  assign _160_ = _067_ & _267_;
  assign _161_ = _160_ ? d : ififomem[329:319];
  assign _162_ = _068_ & _267_;
  assign _163_ = _162_ ? d : ififomem[340:330];
  assign _164_ = _069_ & _267_;
  assign _165_ = _164_ ? d : ififomem[351:341];
  assign _166_ = _070_ & _267_;
  assign _167_ = _166_ ? d : ififomem[362:352];
  assign _168_ = _071_ & _267_;
  assign _169_ = _168_ ? d : ififomem[373:363];
  assign _170_ = _072_ & _267_;
  assign _171_ = _170_ ? d : ififomem[384:374];
  assign _172_ = _073_ & _267_;
  assign _173_ = _172_ ? d : ififomem[395:385];
  assign _174_ = _074_ & _267_;
  assign _175_ = _174_ ? d : ififomem[406:396];
  assign _176_ = _075_ & _267_;
  assign _177_ = _176_ ? d : ififomem[417:407];
  assign _178_ = _076_ & _267_;
  assign _179_ = _178_ ? d : ififomem[428:418];
  assign _180_ = _077_ & _267_;
  assign _181_ = _180_ ? d : ififomem[439:429];
  assign _182_ = _078_ & _267_;
  assign _183_ = _182_ ? d : ififomem[450:440];
  assign _184_ = _079_ & _267_;
  assign _185_ = _184_ ? d : ififomem[461:451];
  assign _186_ = _080_ & _267_;
  assign _187_ = _186_ ? d : ififomem[472:462];
  assign _188_ = _081_ & _267_;
  assign _189_ = _188_ ? d : ififomem[483:473];
  assign _190_ = _082_ & _267_;
  assign _191_ = _190_ ? d : ififomem[494:484];
  assign _192_ = _083_ & _267_;
  assign _193_ = _192_ ? d : ififomem[505:495];
  assign _194_ = _084_ & _267_;
  assign _195_ = _194_ ? d : ififomem[516:506];
  assign _196_ = _085_ & _267_;
  assign _197_ = _196_ ? d : ififomem[527:517];
  assign _198_ = _086_ & _267_;
  assign _199_ = _198_ ? d : ififomem[538:528];
  assign _200_ = _087_ & _267_;
  assign _201_ = _200_ ? d : ififomem[549:539];
  assign _202_ = _088_ & _267_;
  assign _203_ = _202_ ? d : ififomem[560:550];
  assign _204_ = _089_ & _267_;
  assign _205_ = _204_ ? d : ififomem[571:561];
  assign _206_ = _090_ & _267_;
  assign _207_ = _206_ ? d : ififomem[582:572];
  assign _208_ = _091_ & _267_;
  assign _209_ = _208_ ? d : ififomem[593:583];
  assign _210_ = _092_ & _267_;
  assign _211_ = _210_ ? d : ififomem[604:594];
  assign _212_ = _093_ & _267_;
  assign _213_ = _212_ ? d : ififomem[615:605];
  assign _214_ = _094_ & _267_;
  assign _215_ = _214_ ? d : ififomem[626:616];
  assign _216_ = _095_ & _267_;
  assign _217_ = _216_ ? d : ififomem[637:627];
  assign _218_ = _096_ & _267_;
  assign _219_ = _218_ ? d : ififomem[648:638];
  assign _220_ = _097_ & _267_;
  assign _221_ = _220_ ? d : ififomem[659:649];
  assign _222_ = _098_ & _267_;
  assign _223_ = _222_ ? d : ififomem[670:660];
  assign _224_ = _099_ & _267_;
  assign _225_ = _224_ ? d : ififomem[681:671];
  assign _226_ = _100_ & _267_;
  assign _227_ = _226_ ? d : ififomem[692:682];
  assign _228_ = _101_ & _267_;
  assign _229_ = _228_ ? d : ififomem[703:693];
  assign q = _268_;
  assign empty = iempty;
  assign full = ifull;
  assign usage = iusage;
endmodule

module slib_fifo_8_6(clk, rst, clear, write, read, d, q, empty, full, usage);
  wire [7:0] _000_;
  wire [7:0] _001_;
  wire [7:0] _002_;
  wire [7:0] _003_;
  wire [7:0] _004_;
  wire [7:0] _005_;
  wire [7:0] _006_;
  wire [7:0] _007_;
  wire [7:0] _008_;
  wire [7:0] _009_;
  wire [7:0] _010_;
  wire [7:0] _011_;
  wire [7:0] _012_;
  wire [7:0] _013_;
  wire [7:0] _014_;
  wire [7:0] _015_;
  wire [7:0] _016_;
  wire [7:0] _017_;
  wire [7:0] _018_;
  wire [7:0] _019_;
  wire [7:0] _020_;
  wire [7:0] _021_;
  wire [7:0] _022_;
  wire [7:0] _023_;
  wire [7:0] _024_;
  wire [7:0] _025_;
  wire [7:0] _026_;
  wire [7:0] _027_;
  wire [7:0] _028_;
  wire [7:0] _029_;
  wire [7:0] _030_;
  wire [7:0] _031_;
  wire [7:0] _032_;
  wire [7:0] _033_;
  wire [7:0] _034_;
  wire [7:0] _035_;
  wire [7:0] _036_;
  wire [7:0] _037_;
  wire [7:0] _038_;
  wire [7:0] _039_;
  wire [7:0] _040_;
  wire [7:0] _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire [6:0] _047_;
  wire [6:0] _048_;
  wire _049_;
  wire _050_;
  wire [6:0] _051_;
  wire [6:0] _052_;
  wire [6:0] _053_;
  wire [6:0] _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  reg [7:0] _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire [5:0] _064_;
  wire [5:0] _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire [5:0] _070_;
  wire [5:0] _071_;
  wire [5:0] _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  wire _172_;
  wire _173_;
  wire _174_;
  wire _175_;
  wire _176_;
  wire _177_;
  wire _178_;
  wire _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  wire _187_;
  wire _188_;
  wire _189_;
  wire _190_;
  wire _191_;
  wire _192_;
  wire _193_;
  wire _194_;
  wire _195_;
  wire _196_;
  wire _197_;
  wire _198_;
  wire _199_;
  wire _200_;
  wire _201_;
  wire _202_;
  wire _203_;
  wire [7:0] _204_;
  wire _205_;
  wire [7:0] _206_;
  wire _207_;
  wire [7:0] _208_;
  wire _209_;
  wire [7:0] _210_;
  wire _211_;
  wire [7:0] _212_;
  wire _213_;
  wire [7:0] _214_;
  wire _215_;
  wire [7:0] _216_;
  wire _217_;
  wire [7:0] _218_;
  wire _219_;
  wire [7:0] _220_;
  wire _221_;
  wire [7:0] _222_;
  wire _223_;
  wire [7:0] _224_;
  wire _225_;
  wire [7:0] _226_;
  wire _227_;
  wire [7:0] _228_;
  wire _229_;
  wire [7:0] _230_;
  wire _231_;
  wire [7:0] _232_;
  wire _233_;
  wire [7:0] _234_;
  wire _235_;
  wire [7:0] _236_;
  wire _237_;
  wire [7:0] _238_;
  wire _239_;
  wire [7:0] _240_;
  wire _241_;
  wire [7:0] _242_;
  wire _243_;
  wire [7:0] _244_;
  wire _245_;
  wire [7:0] _246_;
  wire _247_;
  wire [7:0] _248_;
  wire _249_;
  wire [7:0] _250_;
  wire _251_;
  wire [7:0] _252_;
  wire _253_;
  wire [7:0] _254_;
  wire _255_;
  wire [7:0] _256_;
  wire _257_;
  wire [7:0] _258_;
  wire _259_;
  wire [7:0] _260_;
  wire _261_;
  wire [7:0] _262_;
  wire _263_;
  wire [7:0] _264_;
  wire _265_;
  wire [7:0] _266_;
  wire _267_;
  wire [7:0] _268_;
  wire _269_;
  wire [7:0] _270_;
  wire _271_;
  wire [7:0] _272_;
  wire _273_;
  wire [7:0] _274_;
  wire _275_;
  wire [7:0] _276_;
  wire _277_;
  wire [7:0] _278_;
  wire _279_;
  wire [7:0] _280_;
  wire _281_;
  wire [7:0] _282_;
  wire _283_;
  wire [7:0] _284_;
  wire _285_;
  wire [7:0] _286_;
  wire _287_;
  wire [7:0] _288_;
  wire _289_;
  wire [7:0] _290_;
  wire _291_;
  wire [7:0] _292_;
  wire _293_;
  wire [7:0] _294_;
  wire _295_;
  wire [7:0] _296_;
  wire _297_;
  wire [7:0] _298_;
  wire _299_;
  wire [7:0] _300_;
  wire _301_;
  wire [7:0] _302_;
  wire _303_;
  wire [7:0] _304_;
  wire _305_;
  wire [7:0] _306_;
  wire _307_;
  wire [7:0] _308_;
  wire _309_;
  wire [7:0] _310_;
  wire _311_;
  wire [7:0] _312_;
  wire _313_;
  wire [7:0] _314_;
  wire _315_;
  wire [7:0] _316_;
  wire _317_;
  wire [7:0] _318_;
  wire _319_;
  wire [7:0] _320_;
  wire _321_;
  wire [7:0] _322_;
  wire _323_;
  wire [7:0] _324_;
  wire _325_;
  wire [7:0] _326_;
  wire _327_;
  wire [7:0] _328_;
  wire _329_;
  wire [7:0] _330_;
  wire [7:0] _331_;
  wire [7:0] _332_;
  wire [7:0] _333_;
  wire [7:0] _334_;
  wire [7:0] _335_;
  wire [7:0] _336_;
  wire [7:0] _337_;
  wire [7:0] _338_;
  wire [7:0] _339_;
  wire [7:0] _340_;
  wire [7:0] _341_;
  wire [7:0] _342_;
  wire [7:0] _343_;
  wire [7:0] _344_;
  wire [7:0] _345_;
  wire [7:0] _346_;
  wire [7:0] _347_;
  wire [7:0] _348_;
  wire [7:0] _349_;
  wire [7:0] _350_;
  wire [7:0] _351_;
  input clear;
  input clk;
  input [7:0] d;
  output empty;
  output full;
  reg iempty;
  reg [511:0] ififomem = 512'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
  wire ifull;
  reg [6:0] irdaddr;
  reg [5:0] iusage;
  reg [6:0] iwraddr;
  output [7:0] q;
  input read;
  input rst;
  output [5:0] usage;
  input write;
  assign _000_ = irdaddr[0] ? ififomem[15:8] : ififomem[7:0];
  assign _001_ = irdaddr[0] ? ififomem[47:40] : ififomem[39:32];
  assign _002_ = irdaddr[0] ? ififomem[79:72] : ififomem[71:64];
  assign _003_ = irdaddr[0] ? ififomem[111:104] : ififomem[103:96];
  assign _004_ = irdaddr[0] ? ififomem[143:136] : ififomem[135:128];
  assign _005_ = irdaddr[0] ? ififomem[175:168] : ififomem[167:160];
  assign _006_ = irdaddr[0] ? ififomem[207:200] : ififomem[199:192];
  assign _007_ = irdaddr[0] ? ififomem[239:232] : ififomem[231:224];
  assign _008_ = irdaddr[0] ? ififomem[271:264] : ififomem[263:256];
  assign _009_ = irdaddr[0] ? ififomem[303:296] : ififomem[295:288];
  assign _010_ = irdaddr[0] ? ififomem[335:328] : ififomem[327:320];
  assign _011_ = irdaddr[0] ? ififomem[367:360] : ififomem[359:352];
  assign _012_ = irdaddr[0] ? ififomem[399:392] : ififomem[391:384];
  assign _013_ = irdaddr[0] ? ififomem[431:424] : ififomem[423:416];
  assign _014_ = irdaddr[0] ? ififomem[463:456] : ififomem[455:448];
  assign _015_ = irdaddr[0] ? ififomem[495:488] : ififomem[487:480];
  assign _016_ = irdaddr[2] ? _332_ : _331_;
  assign _017_ = irdaddr[2] ? _336_ : _335_;
  assign _018_ = irdaddr[2] ? _340_ : _339_;
  assign _019_ = irdaddr[2] ? _344_ : _343_;
  assign _020_ = irdaddr[4] ? _348_ : _347_;
  assign _021_ = irdaddr[0] ? ififomem[31:24] : ififomem[23:16];
  assign _022_ = irdaddr[0] ? ififomem[63:56] : ififomem[55:48];
  assign _023_ = irdaddr[0] ? ififomem[95:88] : ififomem[87:80];
  assign _024_ = irdaddr[0] ? ififomem[127:120] : ififomem[119:112];
  assign _025_ = irdaddr[0] ? ififomem[159:152] : ififomem[151:144];
  assign _026_ = irdaddr[0] ? ififomem[191:184] : ififomem[183:176];
  assign _027_ = irdaddr[0] ? ififomem[223:216] : ififomem[215:208];
  assign _028_ = irdaddr[0] ? ififomem[255:248] : ififomem[247:240];
  assign _029_ = irdaddr[0] ? ififomem[287:280] : ififomem[279:272];
  assign _030_ = irdaddr[0] ? ififomem[319:312] : ififomem[311:304];
  assign _031_ = irdaddr[0] ? ififomem[351:344] : ififomem[343:336];
  assign _032_ = irdaddr[0] ? ififomem[383:376] : ififomem[375:368];
  assign _033_ = irdaddr[0] ? ififomem[415:408] : ififomem[407:400];
  assign _034_ = irdaddr[0] ? ififomem[447:440] : ififomem[439:432];
  assign _035_ = irdaddr[0] ? ififomem[479:472] : ififomem[471:464];
  assign _036_ = irdaddr[0] ? ififomem[511:504] : ififomem[503:496];
  assign _037_ = irdaddr[2] ? _334_ : _333_;
  assign _038_ = irdaddr[2] ? _338_ : _337_;
  assign _039_ = irdaddr[2] ? _342_ : _341_;
  assign _040_ = irdaddr[2] ? _346_ : _345_;
  assign _041_ = irdaddr[4] ? _350_ : _349_;
  assign _331_ = irdaddr[1] ? _021_ : _000_;
  assign _332_ = irdaddr[1] ? _022_ : _001_;
  assign _333_ = irdaddr[1] ? _023_ : _002_;
  assign _334_ = irdaddr[1] ? _024_ : _003_;
  assign _335_ = irdaddr[1] ? _025_ : _004_;
  assign _336_ = irdaddr[1] ? _026_ : _005_;
  assign _337_ = irdaddr[1] ? _027_ : _006_;
  assign _338_ = irdaddr[1] ? _028_ : _007_;
  assign _339_ = irdaddr[1] ? _029_ : _008_;
  assign _340_ = irdaddr[1] ? _030_ : _009_;
  assign _341_ = irdaddr[1] ? _031_ : _010_;
  assign _342_ = irdaddr[1] ? _032_ : _011_;
  assign _343_ = irdaddr[1] ? _033_ : _012_;
  assign _344_ = irdaddr[1] ? _034_ : _013_;
  assign _345_ = irdaddr[1] ? _035_ : _014_;
  assign _346_ = irdaddr[1] ? _036_ : _015_;
  assign _347_ = irdaddr[3] ? _037_ : _016_;
  assign _348_ = irdaddr[3] ? _038_ : _017_;
  assign _349_ = irdaddr[3] ? _039_ : _018_;
  assign _350_ = irdaddr[3] ? _040_ : _019_;
  assign _351_ = irdaddr[5] ? _041_ : _020_;
  assign _042_ = irdaddr[5:0] == iwraddr[5:0];
  assign _043_ = irdaddr[6] != iwraddr[6];
  assign _044_ = _042_ & _043_;
  assign ifull = _044_ ? 1'h1 : 1'h0;
  assign _045_ = ~ ifull;
  assign _046_ = write & _045_;
  assign _047_ = iwraddr + 7'h01;
  assign _048_ = _046_ ? _047_ : iwraddr;
  assign _049_ = ~ iempty;
  assign _050_ = read & _049_;
  assign _051_ = irdaddr + 7'h01;
  assign _052_ = _050_ ? _051_ : irdaddr;
  assign _053_ = clear ? 7'h00 : _048_;
  assign _054_ = clear ? 7'h00 : _052_;
  assign _055_ = irdaddr == iwraddr;
  assign _056_ = _055_ ? 1'h1 : 1'h0;
  always @(posedge clk, posedge rst)
    if (rst) iempty <= 1'h1;
    else iempty <= _056_;
  always @(posedge clk, posedge rst)
    if (rst) iwraddr <= 7'h00;
    else iwraddr <= _053_;
  always @(posedge clk, posedge rst)
    if (rst) irdaddr <= 7'h00;
    else irdaddr <= _054_;
  assign _057_ = ~ ifull;
  assign _058_ = write & _057_;
  always @(posedge clk, posedge rst)
    if (rst) _059_ <= 8'h00;
    else _059_ <= _351_;
  always @(posedge clk, posedge rst)
    if (rst) ififomem <= 512'h00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    else ififomem <= { _330_, _328_, _326_, _324_, _322_, _320_, _318_, _316_, _314_, _312_, _310_, _308_, _306_, _304_, _302_, _300_, _298_, _296_, _294_, _292_, _290_, _288_, _286_, _284_, _282_, _280_, _278_, _276_, _274_, _272_, _270_, _268_, _266_, _264_, _262_, _260_, _258_, _256_, _254_, _252_, _250_, _248_, _246_, _244_, _242_, _240_, _238_, _236_, _234_, _232_, _230_, _228_, _226_, _224_, _222_, _220_, _218_, _216_, _214_, _212_, _210_, _208_, _206_, _204_ };
  assign _060_ = ~ read;
  assign _061_ = _060_ & write;
  assign _062_ = ~ ifull;
  assign _063_ = _061_ & _062_;
  assign _064_ = iusage + 6'h01;
  assign _065_ = _063_ ? _064_ : iusage;
  assign _066_ = ~ write;
  assign _067_ = _066_ & read;
  assign _068_ = ~ iempty;
  assign _069_ = _067_ & _068_;
  assign _070_ = iusage - 6'h01;
  assign _071_ = _069_ ? _070_ : _065_;
  assign _072_ = clear ? 6'h00 : _071_;
  always @(posedge clk, posedge rst)
    if (rst) iusage <= 6'h00;
    else iusage <= _072_;
  assign _073_ = ~ iwraddr[5];
  assign _074_ = ~ iwraddr[4];
  assign _075_ = _073_ & _074_;
  assign _076_ = _073_ & iwraddr[4];
  assign _077_ = iwraddr[5] & _074_;
  assign _078_ = iwraddr[5] & iwraddr[4];
  assign _079_ = ~ iwraddr[3];
  assign _080_ = _075_ & _079_;
  assign _081_ = _075_ & iwraddr[3];
  assign _082_ = _076_ & _079_;
  assign _083_ = _076_ & iwraddr[3];
  assign _084_ = _077_ & _079_;
  assign _085_ = _077_ & iwraddr[3];
  assign _086_ = _078_ & _079_;
  assign _087_ = _078_ & iwraddr[3];
  assign _088_ = ~ iwraddr[2];
  assign _089_ = _080_ & _088_;
  assign _090_ = _080_ & iwraddr[2];
  assign _091_ = _081_ & _088_;
  assign _092_ = _081_ & iwraddr[2];
  assign _093_ = _082_ & _088_;
  assign _094_ = _082_ & iwraddr[2];
  assign _095_ = _083_ & _088_;
  assign _096_ = _083_ & iwraddr[2];
  assign _097_ = _084_ & _088_;
  assign _098_ = _084_ & iwraddr[2];
  assign _099_ = _085_ & _088_;
  assign _100_ = _085_ & iwraddr[2];
  assign _101_ = _086_ & _088_;
  assign _102_ = _086_ & iwraddr[2];
  assign _103_ = _087_ & _088_;
  assign _104_ = _087_ & iwraddr[2];
  assign _105_ = ~ iwraddr[1];
  assign _106_ = _089_ & _105_;
  assign _107_ = _089_ & iwraddr[1];
  assign _108_ = _090_ & _105_;
  assign _109_ = _090_ & iwraddr[1];
  assign _110_ = _091_ & _105_;
  assign _111_ = _091_ & iwraddr[1];
  assign _112_ = _092_ & _105_;
  assign _113_ = _092_ & iwraddr[1];
  assign _114_ = _093_ & _105_;
  assign _115_ = _093_ & iwraddr[1];
  assign _116_ = _094_ & _105_;
  assign _117_ = _094_ & iwraddr[1];
  assign _118_ = _095_ & _105_;
  assign _119_ = _095_ & iwraddr[1];
  assign _120_ = _096_ & _105_;
  assign _121_ = _096_ & iwraddr[1];
  assign _122_ = _097_ & _105_;
  assign _123_ = _097_ & iwraddr[1];
  assign _124_ = _098_ & _105_;
  assign _125_ = _098_ & iwraddr[1];
  assign _126_ = _099_ & _105_;
  assign _127_ = _099_ & iwraddr[1];
  assign _128_ = _100_ & _105_;
  assign _129_ = _100_ & iwraddr[1];
  assign _130_ = _101_ & _105_;
  assign _131_ = _101_ & iwraddr[1];
  assign _132_ = _102_ & _105_;
  assign _133_ = _102_ & iwraddr[1];
  assign _134_ = _103_ & _105_;
  assign _135_ = _103_ & iwraddr[1];
  assign _136_ = _104_ & _105_;
  assign _137_ = _104_ & iwraddr[1];
  assign _138_ = ~ iwraddr[0];
  assign _139_ = _106_ & _138_;
  assign _140_ = _106_ & iwraddr[0];
  assign _141_ = _107_ & _138_;
  assign _142_ = _107_ & iwraddr[0];
  assign _143_ = _108_ & _138_;
  assign _144_ = _108_ & iwraddr[0];
  assign _145_ = _109_ & _138_;
  assign _146_ = _109_ & iwraddr[0];
  assign _147_ = _110_ & _138_;
  assign _148_ = _110_ & iwraddr[0];
  assign _149_ = _111_ & _138_;
  assign _150_ = _111_ & iwraddr[0];
  assign _151_ = _112_ & _138_;
  assign _152_ = _112_ & iwraddr[0];
  assign _153_ = _113_ & _138_;
  assign _154_ = _113_ & iwraddr[0];
  assign _155_ = _114_ & _138_;
  assign _156_ = _114_ & iwraddr[0];
  assign _157_ = _115_ & _138_;
  assign _158_ = _115_ & iwraddr[0];
  assign _159_ = _116_ & _138_;
  assign _160_ = _116_ & iwraddr[0];
  assign _161_ = _117_ & _138_;
  assign _162_ = _117_ & iwraddr[0];
  assign _163_ = _118_ & _138_;
  assign _164_ = _118_ & iwraddr[0];
  assign _165_ = _119_ & _138_;
  assign _166_ = _119_ & iwraddr[0];
  assign _167_ = _120_ & _138_;
  assign _168_ = _120_ & iwraddr[0];
  assign _169_ = _121_ & _138_;
  assign _170_ = _121_ & iwraddr[0];
  assign _171_ = _122_ & _138_;
  assign _172_ = _122_ & iwraddr[0];
  assign _173_ = _123_ & _138_;
  assign _174_ = _123_ & iwraddr[0];
  assign _175_ = _124_ & _138_;
  assign _176_ = _124_ & iwraddr[0];
  assign _177_ = _125_ & _138_;
  assign _178_ = _125_ & iwraddr[0];
  assign _179_ = _126_ & _138_;
  assign _180_ = _126_ & iwraddr[0];
  assign _181_ = _127_ & _138_;
  assign _182_ = _127_ & iwraddr[0];
  assign _183_ = _128_ & _138_;
  assign _184_ = _128_ & iwraddr[0];
  assign _185_ = _129_ & _138_;
  assign _186_ = _129_ & iwraddr[0];
  assign _187_ = _130_ & _138_;
  assign _188_ = _130_ & iwraddr[0];
  assign _189_ = _131_ & _138_;
  assign _190_ = _131_ & iwraddr[0];
  assign _191_ = _132_ & _138_;
  assign _192_ = _132_ & iwraddr[0];
  assign _193_ = _133_ & _138_;
  assign _194_ = _133_ & iwraddr[0];
  assign _195_ = _134_ & _138_;
  assign _196_ = _134_ & iwraddr[0];
  assign _197_ = _135_ & _138_;
  assign _198_ = _135_ & iwraddr[0];
  assign _199_ = _136_ & _138_;
  assign _200_ = _136_ & iwraddr[0];
  assign _201_ = _137_ & _138_;
  assign _202_ = _137_ & iwraddr[0];
  assign _203_ = _139_ & _058_;
  assign _204_ = _203_ ? d : ififomem[7:0];
  assign _205_ = _140_ & _058_;
  assign _206_ = _205_ ? d : ififomem[15:8];
  assign _207_ = _141_ & _058_;
  assign _208_ = _207_ ? d : ififomem[23:16];
  assign _209_ = _142_ & _058_;
  assign _210_ = _209_ ? d : ififomem[31:24];
  assign _211_ = _143_ & _058_;
  assign _212_ = _211_ ? d : ififomem[39:32];
  assign _213_ = _144_ & _058_;
  assign _214_ = _213_ ? d : ififomem[47:40];
  assign _215_ = _145_ & _058_;
  assign _216_ = _215_ ? d : ififomem[55:48];
  assign _217_ = _146_ & _058_;
  assign _218_ = _217_ ? d : ififomem[63:56];
  assign _219_ = _147_ & _058_;
  assign _220_ = _219_ ? d : ififomem[71:64];
  assign _221_ = _148_ & _058_;
  assign _222_ = _221_ ? d : ififomem[79:72];
  assign _223_ = _149_ & _058_;
  assign _224_ = _223_ ? d : ififomem[87:80];
  assign _225_ = _150_ & _058_;
  assign _226_ = _225_ ? d : ififomem[95:88];
  assign _227_ = _151_ & _058_;
  assign _228_ = _227_ ? d : ififomem[103:96];
  assign _229_ = _152_ & _058_;
  assign _230_ = _229_ ? d : ififomem[111:104];
  assign _231_ = _153_ & _058_;
  assign _232_ = _231_ ? d : ififomem[119:112];
  assign _233_ = _154_ & _058_;
  assign _234_ = _233_ ? d : ififomem[127:120];
  assign _235_ = _155_ & _058_;
  assign _236_ = _235_ ? d : ififomem[135:128];
  assign _237_ = _156_ & _058_;
  assign _238_ = _237_ ? d : ififomem[143:136];
  assign _239_ = _157_ & _058_;
  assign _240_ = _239_ ? d : ififomem[151:144];
  assign _241_ = _158_ & _058_;
  assign _242_ = _241_ ? d : ififomem[159:152];
  assign _243_ = _159_ & _058_;
  assign _244_ = _243_ ? d : ififomem[167:160];
  assign _245_ = _160_ & _058_;
  assign _246_ = _245_ ? d : ififomem[175:168];
  assign _247_ = _161_ & _058_;
  assign _248_ = _247_ ? d : ififomem[183:176];
  assign _249_ = _162_ & _058_;
  assign _250_ = _249_ ? d : ififomem[191:184];
  assign _251_ = _163_ & _058_;
  assign _252_ = _251_ ? d : ififomem[199:192];
  assign _253_ = _164_ & _058_;
  assign _254_ = _253_ ? d : ififomem[207:200];
  assign _255_ = _165_ & _058_;
  assign _256_ = _255_ ? d : ififomem[215:208];
  assign _257_ = _166_ & _058_;
  assign _258_ = _257_ ? d : ififomem[223:216];
  assign _259_ = _167_ & _058_;
  assign _260_ = _259_ ? d : ififomem[231:224];
  assign _261_ = _168_ & _058_;
  assign _262_ = _261_ ? d : ififomem[239:232];
  assign _263_ = _169_ & _058_;
  assign _264_ = _263_ ? d : ififomem[247:240];
  assign _265_ = _170_ & _058_;
  assign _266_ = _265_ ? d : ififomem[255:248];
  assign _267_ = _171_ & _058_;
  assign _268_ = _267_ ? d : ififomem[263:256];
  assign _269_ = _172_ & _058_;
  assign _270_ = _269_ ? d : ififomem[271:264];
  assign _271_ = _173_ & _058_;
  assign _272_ = _271_ ? d : ififomem[279:272];
  assign _273_ = _174_ & _058_;
  assign _274_ = _273_ ? d : ififomem[287:280];
  assign _275_ = _175_ & _058_;
  assign _276_ = _275_ ? d : ififomem[295:288];
  assign _277_ = _176_ & _058_;
  assign _278_ = _277_ ? d : ififomem[303:296];
  assign _279_ = _177_ & _058_;
  assign _280_ = _279_ ? d : ififomem[311:304];
  assign _281_ = _178_ & _058_;
  assign _282_ = _281_ ? d : ififomem[319:312];
  assign _283_ = _179_ & _058_;
  assign _284_ = _283_ ? d : ififomem[327:320];
  assign _285_ = _180_ & _058_;
  assign _286_ = _285_ ? d : ififomem[335:328];
  assign _287_ = _181_ & _058_;
  assign _288_ = _287_ ? d : ififomem[343:336];
  assign _289_ = _182_ & _058_;
  assign _290_ = _289_ ? d : ififomem[351:344];
  assign _291_ = _183_ & _058_;
  assign _292_ = _291_ ? d : ififomem[359:352];
  assign _293_ = _184_ & _058_;
  assign _294_ = _293_ ? d : ififomem[367:360];
  assign _295_ = _185_ & _058_;
  assign _296_ = _295_ ? d : ififomem[375:368];
  assign _297_ = _186_ & _058_;
  assign _298_ = _297_ ? d : ififomem[383:376];
  assign _299_ = _187_ & _058_;
  assign _300_ = _299_ ? d : ififomem[391:384];
  assign _301_ = _188_ & _058_;
  assign _302_ = _301_ ? d : ififomem[399:392];
  assign _303_ = _189_ & _058_;
  assign _304_ = _303_ ? d : ififomem[407:400];
  assign _305_ = _190_ & _058_;
  assign _306_ = _305_ ? d : ififomem[415:408];
  assign _307_ = _191_ & _058_;
  assign _308_ = _307_ ? d : ififomem[423:416];
  assign _309_ = _192_ & _058_;
  assign _310_ = _309_ ? d : ififomem[431:424];
  assign _311_ = _193_ & _058_;
  assign _312_ = _311_ ? d : ififomem[439:432];
  assign _313_ = _194_ & _058_;
  assign _314_ = _313_ ? d : ififomem[447:440];
  assign _315_ = _195_ & _058_;
  assign _316_ = _315_ ? d : ififomem[455:448];
  assign _317_ = _196_ & _058_;
  assign _318_ = _317_ ? d : ififomem[463:456];
  assign _319_ = _197_ & _058_;
  assign _320_ = _319_ ? d : ififomem[471:464];
  assign _321_ = _198_ & _058_;
  assign _322_ = _321_ ? d : ififomem[479:472];
  assign _323_ = _199_ & _058_;
  assign _324_ = _323_ ? d : ififomem[487:480];
  assign _325_ = _200_ & _058_;
  assign _326_ = _325_ ? d : ififomem[495:488];
  assign _327_ = _201_ & _058_;
  assign _328_ = _327_ ? d : ififomem[503:496];
  assign _329_ = _202_ & _058_;
  assign _330_ = _329_ ? d : ififomem[511:504];
  assign q = _059_;
  assign empty = iempty;
  assign full = ifull;
  assign usage = iusage;
endmodule

module slib_input_filter_2(clk, rst, ce, d, q);
  wire _00_;
  wire _01_;
  wire [31:0] _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire [31:0] _06_;
  wire [1:0] _07_;
  wire [1:0] _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  reg _13_;
  wire [1:0] _14_;
  input ce;
  input clk;
  input d;
  reg [1:0] icount;
  output q;
  input rst;
  assign _00_ = { 30'h00000000, icount } != 32'd2;
  assign _01_ = d & _00_;
  assign _02_ = { 30'h00000000, icount } + 32'd1;
  assign _03_ = ~ d;
  assign _04_ = { 30'h00000000, icount } != 32'd0;
  assign _05_ = _03_ & _04_;
  assign _06_ = { 30'h00000000, icount } - 32'd1;
  assign _07_ = _05_ ? _06_[1:0] : icount;
  assign _08_ = _01_ ? _02_[1:0] : _07_;
  assign _09_ = { 30'h00000000, icount } == 32'd2;
  assign _10_ = { 30'h00000000, icount } == 32'd0;
  assign _11_ = _10_ ? 1'h0 : _13_;
  assign _12_ = _09_ ? 1'h1 : _11_;
  always @(posedge clk, posedge rst)
    if (rst) _13_ <= 1'h0;
    else _13_ <= _12_;
  assign _14_ = ce ? _08_ : icount;
  always @(posedge clk, posedge rst)
    if (rst) icount <= 2'h0;
    else icount <= _14_;
  assign q = _13_;
endmodule

module slib_input_filter_4(clk, rst, ce, d, q);
  wire _00_;
  wire _01_;
  wire [31:0] _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire [31:0] _06_;
  wire [2:0] _07_;
  wire [2:0] _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  reg _13_;
  wire [2:0] _14_;
  input ce;
  input clk;
  input d;
  reg [2:0] icount;
  output q;
  input rst;
  assign _00_ = { 29'h00000000, icount } != 32'd4;
  assign _01_ = d & _00_;
  assign _02_ = { 29'h00000000, icount } + 32'd1;
  assign _03_ = ~ d;
  assign _04_ = { 29'h00000000, icount } != 32'd0;
  assign _05_ = _03_ & _04_;
  assign _06_ = { 29'h00000000, icount } - 32'd1;
  assign _07_ = _05_ ? _06_[2:0] : icount;
  assign _08_ = _01_ ? _02_[2:0] : _07_;
  assign _09_ = { 29'h00000000, icount } == 32'd4;
  assign _10_ = { 29'h00000000, icount } == 32'd0;
  assign _11_ = _10_ ? 1'h0 : _13_;
  assign _12_ = _09_ ? 1'h1 : _11_;
  always @(posedge clk, posedge rst)
    if (rst) _13_ <= 1'h0;
    else _13_ <= _12_;
  assign _14_ = ce ? _08_ : icount;
  always @(posedge clk, posedge rst)
    if (rst) icount <= 3'h0;
    else icount <= _14_;
  assign q = _13_;
endmodule

module slib_input_sync(clk, rst, d, q);
  input clk;
  input d;
  reg [1:0] id;
  output q;
  input rst;
  always @(posedge clk, posedge rst)
    if (rst) id <= 2'h0;
    else id <= { id[0], d };
  assign q = id[1];
endmodule

module slib_mv_filter_4_10(clk, rst, sample, clear, d, q);
  wire _0_;
  wire _1_;
  wire [4:0] _2_;
  wire [4:0] _3_;
  wire [4:0] _4_;
  wire _5_;
  wire [4:0] _6_;
  wire _7_;
  input clear;
  input clk;
  input d;
  reg [4:0] icounter;
  reg iq;
  output q;
  input rst;
  input sample;
  assign _0_ = icounter >= 5'h0a;
  assign _1_ = sample & d;
  assign _2_ = icounter + 5'h01;
  assign _3_ = _1_ ? _2_ : icounter;
  assign _4_ = _0_ ? icounter : _3_;
  assign _5_ = _0_ ? 1'h1 : iq;
  assign _6_ = clear ? 5'h00 : _4_;
  assign _7_ = clear ? 1'h0 : _5_;
  always @(posedge clk, posedge rst)
    if (rst) icounter <= 5'h00;
    else icounter <= _6_;
  always @(posedge clk, posedge rst)
    if (rst) iq <= 1'h0;
    else iq <= _7_;
  assign q = iq;
endmodule

module uart_baudgen(clk, rst, ce, clear, divider, baudtick);
  wire [15:0] _0_;
  wire [15:0] _1_;
  wire [15:0] _2_;
  wire _3_;
  wire _4_;
  wire [15:0] _5_;
  reg _6_;
  output baudtick;
  input ce;
  input clear;
  input clk;
  input [15:0] divider;
  reg [15:0] icounter;
  input rst;
  assign _0_ = icounter + 16'h0001;
  assign _1_ = ce ? _0_ : icounter;
  assign _2_ = clear ? 16'h0000 : _1_;
  assign _3_ = icounter == divider;
  assign _4_ = _3_ ? 1'h1 : 1'h0;
  assign _5_ = _3_ ? 16'h0000 : _2_;
  always @(posedge clk, posedge rst)
    if (rst) _6_ <= 1'h0;
    else _6_ <= _4_;
  always @(posedge clk, posedge rst)
    if (rst) icounter <= 16'h0000;
    else icounter <= _5_;
  assign baudtick = _6_;
endmodule

module uart_interrupt(clk, rst, ier, lsr, thi, rda, cti, afe, msr, iir, \int );
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire [3:0] _08_;
  wire [3:0] _09_;
  wire [3:0] _10_;
  wire [3:0] _11_;
  wire [3:0] _12_;
  wire _13_;
  input afe;
  input clk;
  input cti;
  wire ictiinterrupt;
  input [3:0] ier;
  reg [3:0] iiir;
  output [3:0] iir;
  wire imsrinterrupt;
  output \int ;
  wire irdainterrupt;
  wire irlsinterrupt;
  wire ithrinterrupt;
  input [4:0] lsr;
  input [3:0] msr;
  input rda;
  input rst;
  input thi;
  assign _00_ = lsr[1] | lsr[2];
  assign _01_ = _00_ | lsr[3];
  assign _02_ = _01_ | lsr[4];
  assign irlsinterrupt = ier[2] & _02_;
  assign irdainterrupt = ier[0] & rda;
  assign ictiinterrupt = ier[0] & cti;
  assign ithrinterrupt = ier[1] & thi;
  assign _03_ = ~ afe;
  assign _04_ = msr[0] & _03_;
  assign _05_ = _04_ | msr[1];
  assign _06_ = _05_ | msr[2];
  assign _07_ = _06_ | msr[3];
  assign imsrinterrupt = ier[3] & _07_;
  assign _08_ = imsrinterrupt ? 4'h0 : 4'h1;
  assign _09_ = ithrinterrupt ? 4'h2 : _08_;
  assign _10_ = irdainterrupt ? 4'h4 : _09_;
  assign _11_ = ictiinterrupt ? 4'hc : _10_;
  assign _12_ = irlsinterrupt ? 4'h6 : _11_;
  always @(posedge clk, posedge rst)
    if (rst) iiir <= 4'h1;
    else iiir <= _12_;
  assign _13_ = ~ iiir[0];
  assign iir = iiir;
  assign \int  = _13_;
endmodule

module uart_receiver(clk, rst, rxclk, rxclear, wls, stb, pen, eps, sp, sin, pe, fe, bi, dout, rxfinished);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire [31:0] _10_;
  wire [3:0] _11_;
  wire [3:0] _12_;
  wire [7:0] _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire [2:0] _30_;
  wire _31_;
  wire _32_;
  wire [2:0] _33_;
  wire [2:0] _34_;
  wire _35_;
  wire [2:0] _36_;
  wire [2:0] _37_;
  wire _38_;
  wire [2:0] _39_;
  wire _40_;
  wire _41_;
  wire [2:0] _42_;
  wire [2:0] _43_;
  wire _44_;
  wire _45_;
  wire _46_;
  wire [2:0] _47_;
  wire _48_;
  wire _49_;
  wire _50_;
  wire _51_;
  wire _52_;
  wire _53_;
  wire _54_;
  wire _55_;
  wire _56_;
  wire _57_;
  wire _58_;
  wire _59_;
  reg _60_;
  wire _61_;
  wire _62_;
  wire _63_;
  wire _64_;
  wire _65_;
  wire _66_;
  wire _67_;
  wire _68_;
  wire _69_;
  wire _70_;
  wire _71_;
  wire _72_;
  wire _73_;
  wire _74_;
  wire _75_;
  wire _76_;
  wire _77_;
  wire _78_;
  wire _79_;
  wire _80_;
  wire _81_;
  wire _82_;
  wire _83_;
  wire _84_;
  wire _85_;
  wire _86_;
  wire _87_;
  wire _88_;
  wire _89_;
  wire _90_;
  wire _91_;
  wire _92_;
  wire _93_;
  wire _94_;
  wire _95_;
  wire _96_;
  wire _97_;
  wire _98_;
  output bi;
  input clk;
  reg [2:0] cstate;
  output [7:0] dout;
  input eps;
  output fe;
  wire ibaudcountclear;
  reg ibaudstepd;
  wire ibi;
  reg [3:0] idatacount;
  wire idatacountfinish;
  wire idatacountinit;
  reg [7:0] idout;
  wire ife;
  wire ifilterclear;
  wire inostopreceived;
  wire iparity;
  reg iparityreceived;
  wire irxfinished;
  wire [2:0] nstate;
  output pe;
  input pen;
  input rst;
  wire [3:0] \rx_brc:2406 ;
  wire \rx_brc:2407 ;
  wire \rx_ifsb:2415 ;
  wire \rx_mvf:2412 ;
  input rxclear;
  input rxclk;
  output rxfinished;
  input sin;
  input sp;
  input stb;
  input [1:0] wls;
  always @(posedge clk, posedge rst)
    if (rst) ibaudstepd <= 1'h0;
    else ibaudstepd <= \rx_brc:2407 ;
  assign ifilterclear = ibaudstepd | ibaudcountclear;
  assign _00_ = idout[7] ^ idout[6];
  assign _01_ = _00_ ^ idout[5];
  assign _02_ = _01_ ^ idout[4];
  assign _03_ = _02_ ^ idout[3];
  assign _04_ = _03_ ^ idout[2];
  assign _05_ = _04_ ^ idout[1];
  assign _06_ = _05_ ^ idout[0];
  assign _07_ = ~ eps;
  assign iparity = _06_ ^ _07_;
  assign _08_ = ~ idatacountfinish;
  assign _09_ = \rx_brc:2407  & _08_;
  assign _10_ = { 28'h0000000, idatacount } + 32'd1;
  assign _11_ = _09_ ? _10_[3:0] : idatacount;
  assign _12_ = idatacountinit ? 4'h0 : _11_;
  assign _13_ = idatacountinit ? 8'h00 : { _98_, _96_, _94_, _92_, _90_, _88_, _86_, _84_ };
  always @(posedge clk, posedge rst)
    if (rst) idatacount <= 4'h0;
    else idatacount <= _12_;
  always @(posedge clk, posedge rst)
    if (rst) idout <= 8'h00;
    else idout <= _13_;
  assign _14_ = wls == 2'h0;
  assign _15_ = { 28'h0000000, idatacount } == 32'd5;
  assign _16_ = _14_ & _15_;
  assign _17_ = wls == 2'h1;
  assign _18_ = { 28'h0000000, idatacount } == 32'd6;
  assign _19_ = _17_ & _18_;
  assign _20_ = _16_ | _19_;
  assign _21_ = wls == 2'h2;
  assign _22_ = { 28'h0000000, idatacount } == 32'd7;
  assign _23_ = _21_ & _22_;
  assign _24_ = _20_ | _23_;
  assign _25_ = wls == 2'h3;
  assign _26_ = { 28'h0000000, idatacount } == 32'd8;
  assign _27_ = _25_ & _26_;
  assign _28_ = _24_ | _27_;
  assign idatacountfinish = _28_ ? 1'h1 : 1'h0;
  always @(posedge clk, posedge rst)
    if (rst) cstate <= 3'h0;
    else cstate <= nstate;
  assign _29_ = ~ sin;
  assign _30_ = _29_ ? 3'h1 : 3'h0;
  assign _31_ = cstate == 3'h0;
  assign _32_ = ~ \rx_mvf:2412 ;
  assign _33_ = _32_ ? 3'h2 : 3'h0;
  assign _34_ = \rx_brc:2407  ? _33_ : 3'h1;
  assign _35_ = cstate == 3'h1;
  assign _36_ = pen ? 3'h3 : 3'h4;
  assign _37_ = idatacountfinish ? _36_ : 3'h2;
  assign _38_ = cstate == 3'h2;
  assign _39_ = \rx_brc:2407  ? 3'h4 : 3'h3;
  assign _40_ = cstate == 3'h3;
  assign _41_ = ~ \rx_ifsb:2415 ;
  assign _42_ = _41_ ? 3'h5 : 3'h0;
  assign _43_ = \rx_brc:2406 [3] ? _42_ : 3'h4;
  assign _44_ = \rx_brc:2406 [3] ? 1'h1 : 1'h0;
  assign _45_ = cstate == 3'h4;
  assign _46_ = ~ sin;
  assign _47_ = _46_ ? 3'h5 : 3'h0;
  assign _48_ = cstate == 3'h5;
  function [2:0] \2555 ;
    input [2:0] a;
    input [17:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \2555  = b[2:0];
      6'b????1?:
        \2555  = b[5:3];
      6'b???1??:
        \2555  = b[8:6];
      6'b??1???:
        \2555  = b[11:9];
      6'b?1????:
        \2555  = b[14:12];
      6'b1?????:
        \2555  = b[17:15];
      default:
        \2555  = a;
    endcase
  endfunction
  assign nstate = \2555 (3'h0, { _47_, _43_, _39_, _37_, _34_, _30_ }, { _48_, _45_, _40_, _38_, _35_, _31_ });
  function [0:0] \2559 ;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \2559  = b[0:0];
      6'b????1?:
        \2559  = b[1:1];
      6'b???1??:
        \2559  = b[2:2];
      6'b??1???:
        \2559  = b[3:3];
      6'b?1????:
        \2559  = b[4:4];
      6'b1?????:
        \2559  = b[5:5];
      default:
        \2559  = a;
    endcase
  endfunction
  assign ibaudcountclear = \2559 (1'h0, 6'h01, { _48_, _45_, _40_, _38_, _35_, _31_ });
  function [0:0] \2564 ;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \2564  = b[0:0];
      6'b????1?:
        \2564  = b[1:1];
      6'b???1??:
        \2564  = b[2:2];
      6'b??1???:
        \2564  = b[3:3];
      6'b?1????:
        \2564  = b[4:4];
      6'b1?????:
        \2564  = b[5:5];
      default:
        \2564  = a;
    endcase
  endfunction
  assign idatacountinit = \2564 (1'h0, 6'h03, { _48_, _45_, _40_, _38_, _35_, _31_ });
  function [0:0] \2567 ;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \2567  = b[0:0];
      6'b????1?:
        \2567  = b[1:1];
      6'b???1??:
        \2567  = b[2:2];
      6'b??1???:
        \2567  = b[3:3];
      6'b?1????:
        \2567  = b[4:4];
      6'b1?????:
        \2567  = b[5:5];
      default:
        \2567  = a;
    endcase
  endfunction
  assign irxfinished = \2567 (1'h0, { 1'h0, _44_, 4'h0 }, { _48_, _45_, _40_, _38_, _35_, _31_ });
  assign _49_ = cstate == 3'h3;
  assign _50_ = _49_ & \rx_brc:2407 ;
  assign _51_ = _50_ ? \rx_mvf:2412  : iparityreceived;
  assign _52_ = eps ^ iparityreceived;
  assign _53_ = ~ _52_;
  assign _54_ = _53_ ? 1'h1 : 1'h0;
  assign _55_ = iparity != iparityreceived;
  assign _56_ = _55_ ? 1'h1 : 1'h0;
  assign _57_ = sp ? _54_ : _56_;
  assign _58_ = pen ? _57_ : 1'h0;
  assign _59_ = pen ? _51_ : 1'h0;
  always @(posedge clk, posedge rst)
    if (rst) _60_ <= 1'h0;
    else _60_ <= _58_;
  always @(posedge clk, posedge rst)
    if (rst) iparityreceived <= 1'h0;
    else iparityreceived <= _59_;
  assign _61_ = ~ \rx_ifsb:2415 ;
  assign _62_ = cstate == 3'h4;
  assign _63_ = _61_ & _62_;
  assign inostopreceived = _63_ ? 1'h1 : 1'h0;
  assign _64_ = idout == 8'h00;
  assign _65_ = ~ iparityreceived;
  assign _66_ = _64_ & _65_;
  assign _67_ = _66_ & inostopreceived;
  assign ibi = _67_ ? 1'h1 : 1'h0;
  assign ife = inostopreceived ? 1'h1 : 1'h0;
  assign _68_ = ~ idatacount[2];
  assign _69_ = ~ idatacount[1];
  assign _70_ = _68_ & _69_;
  assign _71_ = _68_ & idatacount[1];
  assign _72_ = idatacount[2] & _69_;
  assign _73_ = idatacount[2] & idatacount[1];
  assign _74_ = ~ idatacount[0];
  assign _75_ = _70_ & _74_;
  assign _76_ = _70_ & idatacount[0];
  assign _77_ = _71_ & _74_;
  assign _78_ = _71_ & idatacount[0];
  assign _79_ = _72_ & _74_;
  assign _80_ = _72_ & idatacount[0];
  assign _81_ = _73_ & _74_;
  assign _82_ = _73_ & idatacount[0];
  assign _83_ = _75_ & _09_;
  assign _84_ = _83_ ? \rx_mvf:2412  : idout[0];
  assign _85_ = _76_ & _09_;
  assign _86_ = _85_ ? \rx_mvf:2412  : idout[1];
  assign _87_ = _77_ & _09_;
  assign _88_ = _87_ ? \rx_mvf:2412  : idout[2];
  assign _89_ = _78_ & _09_;
  assign _90_ = _89_ ? \rx_mvf:2412  : idout[3];
  assign _91_ = _79_ & _09_;
  assign _92_ = _91_ ? \rx_mvf:2412  : idout[4];
  assign _93_ = _80_ & _09_;
  assign _94_ = _93_ ? \rx_mvf:2412  : idout[5];
  assign _95_ = _81_ & _09_;
  assign _96_ = _95_ ? \rx_mvf:2412  : idout[6];
  assign _97_ = _82_ & _09_;
  assign _98_ = _97_ ? \rx_mvf:2412  : idout[7];
  slib_counter_4 rx_brc (
    .clear(ibaudcountclear),
    .clk(clk),
    .d(4'h0),
    .down(1'h0),
    .enable(rxclk),
    .load(1'h0),
    .overflow(\rx_brc:2407 ),
    .q(\rx_brc:2406 ),
    .rst(rst)
  );
  slib_input_filter_4 rx_ifsb (
    .ce(rxclk),
    .clk(clk),
    .d(sin),
    .q(\rx_ifsb:2415 ),
    .rst(rst)
  );
  slib_mv_filter_4_10 rx_mvf (
    .clear(ifilterclear),
    .clk(clk),
    .d(sin),
    .q(\rx_mvf:2412 ),
    .rst(rst),
    .sample(rxclk)
  );
  assign pe = _60_;
  assign fe = ife;
  assign bi = ibi;
  assign dout = idout;
  assign rxfinished = irxfinished;
endmodule

module uart_transmitter(clk, rst, txclk, txstart, clear, wls, stb, pen, eps, sp, bc, din, txfinished, sout);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire [3:0] _05_;
  wire _06_;
  wire [3:0] _07_;
  wire _08_;
  wire [3:0] _09_;
  wire _10_;
  wire [3:0] _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire [3:0] _19_;
  wire [3:0] _20_;
  wire _21_;
  wire _22_;
  wire [3:0] _23_;
  wire [3:0] _24_;
  wire _25_;
  wire _26_;
  wire [3:0] _27_;
  wire [3:0] _28_;
  wire _29_;
  wire [3:0] _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire [3:0] _37_;
  wire [3:0] _38_;
  wire _39_;
  wire [3:0] _40_;
  wire _41_;
  wire _42_;
  wire _43_;
  wire _44_;
  wire _45_;
  wire _46_;
  wire _47_;
  wire _48_;
  wire _49_;
  wire _50_;
  wire _51_;
  wire _52_;
  wire _53_;
  wire _54_;
  wire _55_;
  wire _56_;
  wire _57_;
  wire _58_;
  wire _59_;
  input bc;
  input clear;
  input clk;
  reg [3:0] cstate;
  input [7:0] din;
  input eps;
  reg ifinished;
  wire iparity;
  wire isout;
  reg itx2;
  wire [3:0] nstate;
  input pen;
  input rst;
  output sout;
  input sp;
  input stb;
  reg \tx_fin.ilast  = 1'hx;
  input txclk;
  output txfinished;
  input txstart;
  input [1:0] wls;
  assign _00_ = ~ itx2;
  assign _01_ = wls == 2'h0;
  assign _02_ = _01_ & stb;
  assign _03_ = cstate == 4'hc;
  assign _04_ = _02_ & _03_;
  assign _05_ = _04_ ? nstate : cstate;
  assign _06_ = _04_ ? 1'h1 : 1'h0;
  assign _07_ = _00_ ? nstate : _05_;
  assign _08_ = _00_ ? 1'h1 : _06_;
  assign _09_ = txclk ? _07_ : cstate;
  always @(posedge clk, posedge rst)
    if (rst) cstate <= 4'h0;
    else cstate <= _09_;
  assign _10_ = txclk ? _08_ : itx2;
  always @(posedge clk, posedge rst)
    if (rst) itx2 <= 1'h0;
    else itx2 <= _10_;
  assign _11_ = txstart ? 4'h1 : 4'h0;
  assign _12_ = cstate == 4'h0;
  assign _13_ = cstate == 4'h1;
  assign _14_ = cstate == 4'h2;
  assign _15_ = cstate == 4'h3;
  assign _16_ = cstate == 4'h4;
  assign _17_ = cstate == 4'h5;
  assign _18_ = wls == 2'h0;
  assign _19_ = pen ? 4'ha : 4'hb;
  assign _20_ = _18_ ? _19_ : 4'h7;
  assign _21_ = cstate == 4'h6;
  assign _22_ = wls == 2'h1;
  assign _23_ = pen ? 4'ha : 4'hb;
  assign _24_ = _22_ ? _23_ : 4'h8;
  assign _25_ = cstate == 4'h7;
  assign _26_ = wls == 2'h2;
  assign _27_ = pen ? 4'ha : 4'hb;
  assign _28_ = _26_ ? _27_ : 4'h9;
  assign _29_ = cstate == 4'h8;
  assign _30_ = pen ? 4'ha : 4'hb;
  assign _31_ = cstate == 4'h9;
  assign _32_ = eps ? 1'h0 : 1'h1;
  assign _33_ = ~ iparity;
  assign _34_ = eps ? iparity : _33_;
  assign _35_ = sp ? _32_ : _34_;
  assign _36_ = cstate == 4'ha;
  assign _37_ = txstart ? 4'h1 : 4'h0;
  assign _38_ = stb ? 4'hc : _37_;
  assign _39_ = cstate == 4'hb;
  assign _40_ = txstart ? 4'h1 : 4'h0;
  assign _41_ = cstate == 4'hc;
  function [3:0] \2334 ;
    input [3:0] a;
    input [51:0] b;
    input [12:0] s;
    (* parallel_case *)
    casez (s)
      13'b????????????1:
        \2334  = b[3:0];
      13'b???????????1?:
        \2334  = b[7:4];
      13'b??????????1??:
        \2334  = b[11:8];
      13'b?????????1???:
        \2334  = b[15:12];
      13'b????????1????:
        \2334  = b[19:16];
      13'b???????1?????:
        \2334  = b[23:20];
      13'b??????1??????:
        \2334  = b[27:24];
      13'b?????1???????:
        \2334  = b[31:28];
      13'b????1????????:
        \2334  = b[35:32];
      13'b???1?????????:
        \2334  = b[39:36];
      13'b??1??????????:
        \2334  = b[43:40];
      13'b?1???????????:
        \2334  = b[47:44];
      13'b1????????????:
        \2334  = b[51:48];
      default:
        \2334  = a;
    endcase
  endfunction
  assign nstate = \2334 (4'h0, { _40_, _38_, 4'hb, _30_, _28_, _24_, _20_, 20'h65432, _11_ }, { _41_, _39_, _36_, _31_, _29_, _25_, _21_, _17_, _16_, _15_, _14_, _13_, _12_ });
  function [0:0] \2338 ;
    input [0:0] a;
    input [12:0] b;
    input [12:0] s;
    (* parallel_case *)
    casez (s)
      13'b????????????1:
        \2338  = b[0:0];
      13'b???????????1?:
        \2338  = b[1:1];
      13'b??????????1??:
        \2338  = b[2:2];
      13'b?????????1???:
        \2338  = b[3:3];
      13'b????????1????:
        \2338  = b[4:4];
      13'b???????1?????:
        \2338  = b[5:5];
      13'b??????1??????:
        \2338  = b[6:6];
      13'b?????1???????:
        \2338  = b[7:7];
      13'b????1????????:
        \2338  = b[8:8];
      13'b???1?????????:
        \2338  = b[9:9];
      13'b??1??????????:
        \2338  = b[10:10];
      13'b?1???????????:
        \2338  = b[11:11];
      13'b1????????????:
        \2338  = b[12:12];
      default:
        \2338  = a;
    endcase
  endfunction
  assign isout = \2338 (1'h1, { 2'h3, _35_, din, 2'h1 }, { _41_, _39_, _36_, _31_, _29_, _25_, _21_, _17_, _16_, _15_, _14_, _13_, _12_ });
  assign _42_ = din[4] ^ din[3];
  assign _43_ = _42_ ^ din[2];
  assign _44_ = _43_ ^ din[1];
  assign _45_ = _44_ ^ din[0];
  assign _46_ = din[5] ^ _45_;
  assign _47_ = din[6] ^ _46_;
  assign _48_ = din[7] ^ _47_;
  assign _49_ = wls == 2'h0;
  assign _50_ = wls == 2'h1;
  assign _51_ = wls == 2'h2;
  function [0:0] \2368 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \2368  = b[0:0];
      3'b?1?:
        \2368  = b[1:1];
      3'b1??:
        \2368  = b[2:2];
      default:
        \2368  = a;
    endcase
  endfunction
  assign iparity = \2368 (_48_, { _47_, _46_, _45_ }, { _51_, _50_, _49_ });
  assign _52_ = ~ \tx_fin.ilast ;
  assign _53_ = cstate == 4'hb;
  assign _54_ = _52_ & _53_;
  assign _55_ = _54_ ? 1'h1 : 1'h0;
  assign _56_ = cstate == 4'hb;
  assign _57_ = _56_ ? 1'h1 : 1'h0;
  always @(posedge clk, posedge rst)
    if (rst) ifinished <= 1'h0;
    else ifinished <= _55_;
  always @(posedge clk, posedge rst)
    if (rst) \tx_fin.ilast  <= 1'h0;
    else \tx_fin.ilast  <= _57_;
  assign _58_ = ~ bc;
  assign _59_ = _58_ ? isout : 1'h0;
  assign txfinished = ifinished;
  assign sout = _59_;
endmodule
